
Contrat_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008778  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008908  08008908  00009908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089a4  080089a4  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  080089a4  080089a4  000099a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089ac  080089ac  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089ac  080089ac  000099ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089b0  080089b0  000099b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080089b4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000074  08008a28  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08008a28  0000a510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f56  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002712  00000000  00000000  0001effa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00021710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1f  00000000  00000000  00022a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bc9  00000000  00000000  00023977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bcc  00000000  00000000  0004c540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105db4  00000000  00000000  0006210c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005924  00000000  00000000  00167f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0016d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088f0 	.word	0x080088f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080088f0 	.word	0x080088f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <mesure_vitesse>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mesure_vitesse()
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
    // Codeur Droit - TIM3
    dist_now_D = __HAL_TIM_GET_COUNTER(&htim3);
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <mesure_vitesse+0x9c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <mesure_vitesse+0xa0>)
 8000b8a:	801a      	strh	r2, [r3, #0]
    vitesse_reelle_D = (dist_now_D >= dist_old_D) ?
 8000b8c:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <mesure_vitesse+0xa0>)
 8000b8e:	881a      	ldrh	r2, [r3, #0]
 8000b90:	4b23      	ldr	r3, [pc, #140]	@ (8000c20 <mesure_vitesse+0xa4>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d307      	bcc.n	8000ba8 <mesure_vitesse+0x2c>
                       (dist_now_D - dist_old_D) :
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <mesure_vitesse+0xa0>)
 8000b9a:	881a      	ldrh	r2, [r3, #0]
 8000b9c:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <mesure_vitesse+0xa4>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	b29b      	uxth	r3, r3
    vitesse_reelle_D = (dist_now_D >= dist_old_D) ?
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	e008      	b.n	8000bba <mesure_vitesse+0x3e>
                       (65535 - dist_old_D + dist_now_D);
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <mesure_vitesse+0xa0>)
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <mesure_vitesse+0xa4>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
    vitesse_reelle_D = (dist_now_D >= dist_old_D) ?
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	4a1a      	ldr	r2, [pc, #104]	@ (8000c24 <mesure_vitesse+0xa8>)
 8000bbc:	8013      	strh	r3, [r2, #0]
    dist_old_D = dist_now_D;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <mesure_vitesse+0xa0>)
 8000bc0:	881a      	ldrh	r2, [r3, #0]
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <mesure_vitesse+0xa4>)
 8000bc4:	801a      	strh	r2, [r3, #0]

    // Codeur Gauche - TIM4
    dist_now_G = __HAL_TIM_GET_COUNTER(&htim4);
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <mesure_vitesse+0xac>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <mesure_vitesse+0xb0>)
 8000bd0:	801a      	strh	r2, [r3, #0]
    vitesse_reelle_G = (dist_now_G >= dist_old_G) ?
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <mesure_vitesse+0xb0>)
 8000bd4:	881a      	ldrh	r2, [r3, #0]
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <mesure_vitesse+0xb4>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d307      	bcc.n	8000bee <mesure_vitesse+0x72>
                       (dist_now_G - dist_old_G) :
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <mesure_vitesse+0xb0>)
 8000be0:	881a      	ldrh	r2, [r3, #0]
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <mesure_vitesse+0xb4>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	b29b      	uxth	r3, r3
    vitesse_reelle_G = (dist_now_G >= dist_old_G) ?
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	e008      	b.n	8000c00 <mesure_vitesse+0x84>
                       (65535 - dist_old_G + dist_now_G);
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <mesure_vitesse+0xb0>)
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <mesure_vitesse+0xb4>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b29b      	uxth	r3, r3
    vitesse_reelle_G = (dist_now_G >= dist_old_G) ?
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4a0c      	ldr	r2, [pc, #48]	@ (8000c34 <mesure_vitesse+0xb8>)
 8000c02:	8013      	strh	r3, [r2, #0]
    dist_old_G = dist_now_G;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <mesure_vitesse+0xb0>)
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <mesure_vitesse+0xb4>)
 8000c0a:	801a      	strh	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000188 	.word	0x20000188
 8000c1c:	200003b6 	.word	0x200003b6
 8000c20:	200003b4 	.word	0x200003b4
 8000c24:	200003bc 	.word	0x200003bc
 8000c28:	200001d4 	.word	0x200001d4
 8000c2c:	200003ba 	.word	0x200003ba
 8000c30:	200003b8 	.word	0x200003b8
 8000c34:	200003be 	.word	0x200003be

08000c38 <pid_vitesse>:

void pid_vitesse()
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
    // PID droit
    erreur_D = vitesse_consigne_D - vitesse_reelle_D;
 8000c3c:	4b52      	ldr	r3, [pc, #328]	@ (8000d88 <pid_vitesse+0x150>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b52      	ldr	r3, [pc, #328]	@ (8000d8c <pid_vitesse+0x154>)
 8000c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	4b4f      	ldr	r3, [pc, #316]	@ (8000d90 <pid_vitesse+0x158>)
 8000c52:	801a      	strh	r2, [r3, #0]
    integrale_D += erreur_D;
 8000c54:	4b4e      	ldr	r3, [pc, #312]	@ (8000d90 <pid_vitesse+0x158>)
 8000c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d94 <pid_vitesse+0x15c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a4c      	ldr	r2, [pc, #304]	@ (8000d94 <pid_vitesse+0x15c>)
 8000c64:	6013      	str	r3, [r2, #0]
    derivee_D = erreur_D - erreur_old_D;
 8000c66:	4b4a      	ldr	r3, [pc, #296]	@ (8000d90 <pid_vitesse+0x158>)
 8000c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d98 <pid_vitesse+0x160>)
 8000c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b47      	ldr	r3, [pc, #284]	@ (8000d9c <pid_vitesse+0x164>)
 8000c7e:	801a      	strh	r2, [r3, #0]
    erreur_old_D = erreur_D;
 8000c80:	4b43      	ldr	r3, [pc, #268]	@ (8000d90 <pid_vitesse+0x158>)
 8000c82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c86:	4b44      	ldr	r3, [pc, #272]	@ (8000d98 <pid_vitesse+0x160>)
 8000c88:	801a      	strh	r2, [r3, #0]

    pwm_D = Kp_D * erreur_D + Ki_D * integrale_D + Kd_D * derivee_D;
 8000c8a:	4b41      	ldr	r3, [pc, #260]	@ (8000d90 <pid_vitesse+0x158>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b43      	ldr	r3, [pc, #268]	@ (8000da0 <pid_vitesse+0x168>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	fb03 f202 	mul.w	r2, r3, r2
 8000c9a:	4b42      	ldr	r3, [pc, #264]	@ (8000da4 <pid_vitesse+0x16c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	493d      	ldr	r1, [pc, #244]	@ (8000d94 <pid_vitesse+0x15c>)
 8000ca0:	6809      	ldr	r1, [r1, #0]
 8000ca2:	fb01 f303 	mul.w	r3, r1, r3
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8000d9c <pid_vitesse+0x164>)
 8000caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8000da8 <pid_vitesse+0x170>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	fb01 f303 	mul.w	r3, r1, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a3c      	ldr	r2, [pc, #240]	@ (8000dac <pid_vitesse+0x174>)
 8000cbc:	6013      	str	r3, [r2, #0]
    if (pwm_D > PWM_MAX) pwm_D = PWM_MAX;
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000dac <pid_vitesse+0x174>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8000db0 <pid_vitesse+0x178>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dd02      	ble.n	8000cce <pid_vitesse+0x96>
 8000cc8:	4b38      	ldr	r3, [pc, #224]	@ (8000dac <pid_vitesse+0x174>)
 8000cca:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <pid_vitesse+0x178>)
 8000ccc:	601a      	str	r2, [r3, #0]
    if (pwm_D < 0) pwm_D = 0;
 8000cce:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <pid_vitesse+0x174>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da02      	bge.n	8000cdc <pid_vitesse+0xa4>
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <pid_vitesse+0x174>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

    // PID gauche
    erreur_G = vitesse_consigne_G - vitesse_reelle_G;
 8000cdc:	4b35      	ldr	r3, [pc, #212]	@ (8000db4 <pid_vitesse+0x17c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <pid_vitesse+0x180>)
 8000ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	4b32      	ldr	r3, [pc, #200]	@ (8000dbc <pid_vitesse+0x184>)
 8000cf2:	801a      	strh	r2, [r3, #0]
    integrale_G += erreur_G;
 8000cf4:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <pid_vitesse+0x184>)
 8000cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b30      	ldr	r3, [pc, #192]	@ (8000dc0 <pid_vitesse+0x188>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc0 <pid_vitesse+0x188>)
 8000d04:	6013      	str	r3, [r2, #0]
    derivee_G = erreur_G - erreur_old_G;
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <pid_vitesse+0x184>)
 8000d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc4 <pid_vitesse+0x18c>)
 8000d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <pid_vitesse+0x190>)
 8000d1e:	801a      	strh	r2, [r3, #0]
    erreur_old_G = erreur_G;
 8000d20:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <pid_vitesse+0x184>)
 8000d22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d26:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <pid_vitesse+0x18c>)
 8000d28:	801a      	strh	r2, [r3, #0]

    pwm_G = Kp_G * erreur_G + Ki_G * integrale_G + Kd_G * derivee_G;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <pid_vitesse+0x184>)
 8000d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <pid_vitesse+0x194>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	fb03 f202 	mul.w	r2, r3, r2
 8000d3a:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <pid_vitesse+0x198>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4920      	ldr	r1, [pc, #128]	@ (8000dc0 <pid_vitesse+0x188>)
 8000d40:	6809      	ldr	r1, [r1, #0]
 8000d42:	fb01 f303 	mul.w	r3, r1, r3
 8000d46:	441a      	add	r2, r3
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <pid_vitesse+0x190>)
 8000d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <pid_vitesse+0x19c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	fb01 f303 	mul.w	r3, r1, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd8 <pid_vitesse+0x1a0>)
 8000d5c:	6013      	str	r3, [r2, #0]
    if (pwm_G > PWM_MAX) pwm_G = PWM_MAX;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <pid_vitesse+0x1a0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <pid_vitesse+0x178>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	dd02      	ble.n	8000d6e <pid_vitesse+0x136>
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <pid_vitesse+0x1a0>)
 8000d6a:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <pid_vitesse+0x178>)
 8000d6c:	601a      	str	r2, [r3, #0]
    if (pwm_G < 0) pwm_G = 0;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <pid_vitesse+0x1a0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da02      	bge.n	8000d7c <pid_vitesse+0x144>
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <pid_vitesse+0x1a0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	200003bc 	.word	0x200003bc
 8000d90:	20000394 	.word	0x20000394
 8000d94:	2000039c 	.word	0x2000039c
 8000d98:	20000396 	.word	0x20000396
 8000d9c:	20000398 	.word	0x20000398
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000004 	.word	0x20000004
 8000da8:	2000038c 	.word	0x2000038c
 8000dac:	200003ac 	.word	0x200003ac
 8000db0:	00013880 	.word	0x00013880
 8000db4:	20000014 	.word	0x20000014
 8000db8:	200003be 	.word	0x200003be
 8000dbc:	200003a0 	.word	0x200003a0
 8000dc0:	200003a8 	.word	0x200003a8
 8000dc4:	200003a2 	.word	0x200003a2
 8000dc8:	200003a4 	.word	0x200003a4
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	20000390 	.word	0x20000390
 8000dd8:	200003b0 	.word	0x200003b0

08000ddc <parcours>:

void parcours() {
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b095      	sub	sp, #84	@ 0x54
 8000de0:	af02      	add	r7, sp, #8
	uint16_t ir1 = buff[1];  // capteur droit
 8000de2:	4b6b      	ldr	r3, [pc, #428]	@ (8000f90 <parcours+0x1b4>)
 8000de4:	885b      	ldrh	r3, [r3, #2]
 8000de6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t ir2 = buff[2];  // capteur gauche
 8000dea:	4b69      	ldr	r3, [pc, #420]	@ (8000f90 <parcours+0x1b4>)
 8000dec:	889b      	ldrh	r3, [r3, #4]
 8000dee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (ir1 > seuil && ir2 > seuil)
 8000df2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000df6:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000dfa:	d91a      	bls.n	8000e32 <parcours+0x56>
 8000dfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000e00:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000e04:	d915      	bls.n	8000e32 <parcours+0x56>
    {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_G);
 8000e06:	4b63      	ldr	r3, [pc, #396]	@ (8000f94 <parcours+0x1b8>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b63      	ldr	r3, [pc, #396]	@ (8000f98 <parcours+0x1bc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm_D);
 8000e10:	4b62      	ldr	r3, [pc, #392]	@ (8000f9c <parcours+0x1c0>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b60      	ldr	r3, [pc, #384]	@ (8000f98 <parcours+0x1bc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, 1);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e20:	485f      	ldr	r0, [pc, #380]	@ (8000fa0 <parcours+0x1c4>)
 8000e22:	f003 fcd3 	bl	80047cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Cmde_DirG_GPIO_Port, Cmde_DirG_Pin, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2104      	movs	r1, #4
 8000e2a:	485e      	ldr	r0, [pc, #376]	@ (8000fa4 <parcours+0x1c8>)
 8000e2c:	f003 fcce 	bl	80047cc <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, 0);
  		  HAL_GPIO_WritePin(Cmde_DirG_GPIO_Port, Cmde_DirG_Pin, 1);
    	}

    }
    return;
 8000e30:	e0aa      	b.n	8000f88 <parcours+0x1ac>
    	if (ir1 < stop && ir2 < stop)
 8000e32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000e36:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e3a:	d235      	bcs.n	8000ea8 <parcours+0xcc>
 8000e3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000e40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e44:	d230      	bcs.n	8000ea8 <parcours+0xcc>
 		   GO = 0;
 8000e46:	4b58      	ldr	r3, [pc, #352]	@ (8000fa8 <parcours+0x1cc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
		   HAL_TIM_Base_Stop(&htim6);
 8000e4c:	4857      	ldr	r0, [pc, #348]	@ (8000fac <parcours+0x1d0>)
 8000e4e:	f005 f864 	bl	8005f1a <HAL_TIM_Base_Stop>
	       snprintf(msg, sizeof(msg), "Temps de parcours = %ld.%ld s\r\n", (T*100)/1000, (T*100)%1000);
 8000e52:	4b57      	ldr	r3, [pc, #348]	@ (8000fb0 <parcours+0x1d4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2264      	movs	r2, #100	@ 0x64
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	4a55      	ldr	r2, [pc, #340]	@ (8000fb4 <parcours+0x1d8>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0999      	lsrs	r1, r3, #6
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <parcours+0x1d4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2264      	movs	r2, #100	@ 0x64
 8000e6a:	fb03 f202 	mul.w	r2, r3, r2
 8000e6e:	4b51      	ldr	r3, [pc, #324]	@ (8000fb4 <parcours+0x1d8>)
 8000e70:	fba3 0302 	umull	r0, r3, r3, r2
 8000e74:	099b      	lsrs	r3, r3, #6
 8000e76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e7a:	fb00 f303 	mul.w	r3, r0, r3
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	1d38      	adds	r0, r7, #4
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	460b      	mov	r3, r1
 8000e86:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb8 <parcours+0x1dc>)
 8000e88:	2140      	movs	r1, #64	@ 0x40
 8000e8a:	f007 f87d 	bl	8007f88 <sniprintf>
	       HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff f99d 	bl	80001d0 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	1d39      	adds	r1, r7, #4
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	4846      	ldr	r0, [pc, #280]	@ (8000fbc <parcours+0x1e0>)
 8000ea2:	f006 fb13 	bl	80074cc <HAL_UART_Transmit>
 8000ea6:	e070      	b.n	8000f8a <parcours+0x1ae>
    	if (ir1 < seuil)
 8000ea8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000eac:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000eb0:	d232      	bcs.n	8000f18 <parcours+0x13c>
  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0.5*pwm_G);
 8000eb2:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <parcours+0x1b8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc5e 	bl	8000778 <__aeabi_i2d>
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <parcours+0x1e4>)
 8000ec2:	f7ff f9dd 	bl	8000280 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4933      	ldr	r1, [pc, #204]	@ (8000f98 <parcours+0x1bc>)
 8000ecc:	680c      	ldr	r4, [r1, #0]
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fcbb 	bl	800084c <__aeabi_d2uiz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6363      	str	r3, [r4, #52]	@ 0x34
  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0.5*pwm_D);
 8000eda:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <parcours+0x1c0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fc4a 	bl	8000778 <__aeabi_i2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <parcours+0x1e4>)
 8000eea:	f7ff f9c9 	bl	8000280 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4929      	ldr	r1, [pc, #164]	@ (8000f98 <parcours+0x1bc>)
 8000ef4:	680c      	ldr	r4, [r1, #0]
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fca7 	bl	800084c <__aeabi_d2uiz>
 8000efe:	4603      	mov	r3, r0
 8000f00:	6423      	str	r3, [r4, #64]	@ 0x40
  		  HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f08:	4825      	ldr	r0, [pc, #148]	@ (8000fa0 <parcours+0x1c4>)
 8000f0a:	f003 fc5f 	bl	80047cc <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(Cmde_DirG_GPIO_Port, Cmde_DirG_Pin, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2104      	movs	r1, #4
 8000f12:	4824      	ldr	r0, [pc, #144]	@ (8000fa4 <parcours+0x1c8>)
 8000f14:	f003 fc5a 	bl	80047cc <HAL_GPIO_WritePin>
    	if (ir2 < seuil)
 8000f18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000f1c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000f20:	d232      	bcs.n	8000f88 <parcours+0x1ac>
  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0.5*pwm_G);
 8000f22:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <parcours+0x1b8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fc26 	bl	8000778 <__aeabi_i2d>
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <parcours+0x1e4>)
 8000f32:	f7ff f9a5 	bl	8000280 <__aeabi_dmul>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4917      	ldr	r1, [pc, #92]	@ (8000f98 <parcours+0x1bc>)
 8000f3c:	680c      	ldr	r4, [r1, #0]
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fc83 	bl	800084c <__aeabi_d2uiz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	6363      	str	r3, [r4, #52]	@ 0x34
  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0.5*pwm_D);
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <parcours+0x1c0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fc12 	bl	8000778 <__aeabi_i2d>
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <parcours+0x1e4>)
 8000f5a:	f7ff f991 	bl	8000280 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <parcours+0x1bc>)
 8000f64:	680c      	ldr	r4, [r1, #0]
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fc6f 	bl	800084c <__aeabi_d2uiz>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6423      	str	r3, [r4, #64]	@ 0x40
  		  HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f78:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <parcours+0x1c4>)
 8000f7a:	f003 fc27 	bl	80047cc <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(Cmde_DirG_GPIO_Port, Cmde_DirG_Pin, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2104      	movs	r1, #4
 8000f82:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <parcours+0x1c8>)
 8000f84:	f003 fc22 	bl	80047cc <HAL_GPIO_WritePin>
    return;
 8000f88:	bf00      	nop
}
 8000f8a:	374c      	adds	r7, #76	@ 0x4c
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	20000384 	.word	0x20000384
 8000f94:	200003b0 	.word	0x200003b0
 8000f98:	2000013c 	.word	0x2000013c
 8000f9c:	200003ac 	.word	0x200003ac
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	2000037c 	.word	0x2000037c
 8000fac:	20000220 	.word	0x20000220
 8000fb0:	20000380 	.word	0x20000380
 8000fb4:	10624dd3 	.word	0x10624dd3
 8000fb8:	08008908 	.word	0x08008908
 8000fbc:	200002f4 	.word	0x200002f4
 8000fc0:	3fe00000 	.word	0x3fe00000

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 ff9e 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f866 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 fb54 	bl	800167c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 fb34 	bl	8001640 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fd8:	f000 fad2 	bl	8001580 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000fdc:	f000 fa9a 	bl	8001514 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000fe0:	f000 f8ae 	bl	8001140 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fe4:	f000 f968 	bl	80012b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fe8:	f000 f9e8 	bl	80013bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fec:	f000 fa3c 	bl	8001468 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000ff0:	f000 faf6 	bl	80015e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(IR1_GPIO_Port, IR1_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ffa:	481f      	ldr	r0, [pc, #124]	@ (8001078 <main+0xb4>)
 8000ffc:	f003 fbe6 	bl	80047cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR2_GPIO_Port, IR2_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001006:	481c      	ldr	r0, [pc, #112]	@ (8001078 <main+0xb4>)
 8001008:	f003 fbe0 	bl	80047cc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	481b      	ldr	r0, [pc, #108]	@ (800107c <main+0xb8>)
 8001010:	f005 f872 	bl	80060f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001014:	210c      	movs	r1, #12
 8001016:	4819      	ldr	r0, [pc, #100]	@ (800107c <main+0xb8>)
 8001018:	f005 f86e 	bl	80060f8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (GO) {
 800101c:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <main+0xbc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d019      	beq.n	800105a <main+0x96>
		  if (!tim_started)
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <main+0xc0>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d105      	bne.n	800103a <main+0x76>
		  {
			  HAL_TIM_Base_Start_IT(&htim6);
 800102e:	4816      	ldr	r0, [pc, #88]	@ (8001088 <main+0xc4>)
 8001030:	f004 ff9a 	bl	8005f68 <HAL_TIM_Base_Start_IT>
			  tim_started = 1;
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <main+0xc0>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
		  }
		  if (Tbatt >= 1)
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <main+0xc8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d007      	beq.n	8001054 <main+0x90>
		  {
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buff, 3);
 8001044:	2203      	movs	r2, #3
 8001046:	4912      	ldr	r1, [pc, #72]	@ (8001090 <main+0xcc>)
 8001048:	4812      	ldr	r0, [pc, #72]	@ (8001094 <main+0xd0>)
 800104a:	f001 fbf7 	bl	800283c <HAL_ADC_Start_DMA>
			  Tbatt = 0;
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <main+0xc8>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
//	      int tension = (int)(((float)buff[0] * 8) / 4.095f);
//	      char msg[64];
//	      snprintf(msg, sizeof(msg), "Vbatt = %d mV\r\n", tension);
//	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	      parcours();
 8001054:	f7ff fec2 	bl	8000ddc <parcours>
 8001058:	e7e0      	b.n	800101c <main+0x58>
	  }
	  else
	  {
		   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <main+0xb8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	@ 0x34
		   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <main+0xb8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	641a      	str	r2, [r3, #64]	@ 0x40
	       T = 0;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <main+0xd4>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
	       tim_started = 0;
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <main+0xc0>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
	  if (GO) {
 8001076:	e7d1      	b.n	800101c <main+0x58>
 8001078:	48000400 	.word	0x48000400
 800107c:	2000013c 	.word	0x2000013c
 8001080:	2000037c 	.word	0x2000037c
 8001084:	2000037e 	.word	0x2000037e
 8001088:	20000220 	.word	0x20000220
 800108c:	2000037d 	.word	0x2000037d
 8001090:	20000384 	.word	0x20000384
 8001094:	20000090 	.word	0x20000090
 8001098:	20000380 	.word	0x20000380

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	@ 0x58
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2244      	movs	r2, #68	@ 0x44
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 ffa0 	bl	8007ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010c2:	f003 fbc1 	bl	8004848 <HAL_PWREx_ControlVoltageScaling>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010cc:	f000 fbcc 	bl	8001868 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010da:	2310      	movs	r3, #16
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e2:	2302      	movs	r3, #2
 80010e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ea:	230a      	movs	r3, #10
 80010ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fbf8 	bl	80048f4 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800110a:	f000 fbad 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2303      	movs	r3, #3
 8001114:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	2104      	movs	r1, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f003 ffc0 	bl	80050ac <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001132:	f000 fb99 	bl	8001868 <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3758      	adds	r7, #88	@ 0x58
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b090      	sub	sp, #64	@ 0x40
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001146:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001174:	4b4a      	ldr	r3, [pc, #296]	@ (80012a0 <MX_ADC1_Init+0x160>)
 8001176:	4a4b      	ldr	r2, [pc, #300]	@ (80012a4 <MX_ADC1_Init+0x164>)
 8001178:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800117a:	4b49      	ldr	r3, [pc, #292]	@ (80012a0 <MX_ADC1_Init+0x160>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001180:	4b47      	ldr	r3, [pc, #284]	@ (80012a0 <MX_ADC1_Init+0x160>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001186:	4b46      	ldr	r3, [pc, #280]	@ (80012a0 <MX_ADC1_Init+0x160>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118c:	4b44      	ldr	r3, [pc, #272]	@ (80012a0 <MX_ADC1_Init+0x160>)
 800118e:	2201      	movs	r2, #1
 8001190:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	4b43      	ldr	r3, [pc, #268]	@ (80012a0 <MX_ADC1_Init+0x160>)
 8001194:	2204      	movs	r2, #4
 8001196:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001198:	4b41      	ldr	r3, [pc, #260]	@ (80012a0 <MX_ADC1_Init+0x160>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119e:	4b40      	ldr	r3, [pc, #256]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80011a4:	4b3e      	ldr	r3, [pc, #248]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b39      	ldr	r3, [pc, #228]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011be:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c6:	4b36      	ldr	r3, [pc, #216]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011cc:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d4:	4832      	ldr	r0, [pc, #200]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011d6:	f001 f9e1 	bl	800259c <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80011e0:	f000 fb42 	bl	8001868 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011ec:	4619      	mov	r1, r3
 80011ee:	482c      	ldr	r0, [pc, #176]	@ (80012a0 <MX_ADC1_Init+0x160>)
 80011f0:	f002 fd88 	bl	8003d04 <HAL_ADCEx_MultiModeConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80011fa:	f000 fb35 	bl	8001868 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_ADC1_Init+0x168>)
 8001200:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001202:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8001206:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_14;
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <MX_ADC1_Init+0x16c>)
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.ITMode = ENABLE;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.HighThreshold = 4095;
 8001212:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.LowThreshold = 3723;
 8001218:	f640 638b 	movw	r3, #3723	@ 0xe8b
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	481e      	ldr	r0, [pc, #120]	@ (80012a0 <MX_ADC1_Init+0x160>)
 8001226:	f002 f9ef 	bl	8003608 <HAL_ADC_AnalogWDGConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001230:	f000 fb1a 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <MX_ADC1_Init+0x16c>)
 8001236:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001238:	2306      	movs	r3, #6
 800123a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800123c:	2307      	movs	r3, #7
 800123e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001240:	237f      	movs	r3, #127	@ 0x7f
 8001242:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001244:	2304      	movs	r3, #4
 8001246:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4813      	ldr	r0, [pc, #76]	@ (80012a0 <MX_ADC1_Init+0x160>)
 8001252:	f001 fde7 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800125c:	f000 fb04 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <MX_ADC1_Init+0x170>)
 8001262:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001264:	230c      	movs	r3, #12
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <MX_ADC1_Init+0x160>)
 800126e:	f001 fdd9 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001278:	f000 faf6 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <MX_ADC1_Init+0x174>)
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001280:	2312      	movs	r3, #18
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_ADC1_Init+0x160>)
 800128a:	f001 fdcb 	bl	8002e24 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001294:	f000 fae8 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3740      	adds	r7, #64	@ 0x40
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000090 	.word	0x20000090
 80012a4:	50040000 	.word	0x50040000
 80012a8:	7dc00000 	.word	0x7dc00000
 80012ac:	3ac04000 	.word	0x3ac04000
 80012b0:	0c900008 	.word	0x0c900008
 80012b4:	10c00010 	.word	0x10c00010

080012b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	@ 0x38
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ea:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80012f2:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000-1;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 8001300:	4a2d      	ldr	r2, [pc, #180]	@ (80013b8 <MX_TIM2_Init+0x100>)
 8001302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001310:	4828      	ldr	r0, [pc, #160]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 8001312:	f004 fdab 	bl	8005e6c <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800131c:	f000 faa4 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800132a:	4619      	mov	r1, r3
 800132c:	4821      	ldr	r0, [pc, #132]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 800132e:	f005 faab 	bl	8006888 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001338:	f000 fa96 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800133c:	481d      	ldr	r0, [pc, #116]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 800133e:	f004 fe83 	bl	8006048 <HAL_TIM_PWM_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001348:	f000 fa8e 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 800135c:	f005 ffc2 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001366:	f000 fa7f 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	@ 0x60
 800136c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 8001382:	f005 f96d 	bl	8006660 <HAL_TIM_PWM_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800138c:	f000 fa6c 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	220c      	movs	r2, #12
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 8001398:	f005 f962 	bl	8006660 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013a2:	f000 fa61 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013a6:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <MX_TIM2_Init+0xfc>)
 80013a8:	f000 fbe6 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 80013ac:	bf00      	nop
 80013ae:	3738      	adds	r7, #56	@ 0x38
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000013c 	.word	0x2000013c
 80013b8:	0001387f 	.word	0x0001387f

080013bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	@ 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2224      	movs	r2, #36	@ 0x24
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fe10 	bl	8007ff0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <MX_TIM3_Init+0xa8>)
 80013de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_TIM3_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001400:	2303      	movs	r3, #3
 8001402:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001408:	2301      	movs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	480d      	ldr	r0, [pc, #52]	@ (8001460 <MX_TIM3_Init+0xa4>)
 800142c:	f004 ff6a 	bl	8006304 <HAL_TIM_Encoder_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001436:	f000 fa17 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_TIM3_Init+0xa4>)
 8001448:	f005 ff4c 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001452:	f000 fa09 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3730      	adds	r7, #48	@ 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000188 	.word	0x20000188
 8001464:	40000400 	.word	0x40000400

08001468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	@ 0x30
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2224      	movs	r2, #36	@ 0x24
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f006 fdba 	bl	8007ff0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <MX_TIM4_Init+0xa4>)
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <MX_TIM4_Init+0xa8>)
 800148a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <MX_TIM4_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <MX_TIM4_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_TIM4_Init+0xa4>)
 800149a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ac:	2303      	movs	r3, #3
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c4:	2301      	movs	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014d8:	f004 ff14 	bl	8006304 <HAL_TIM_Encoder_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014e2:	f000 f9c1 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	@ (800150c <MX_TIM4_Init+0xa4>)
 80014f4:	f005 fef6 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014fe:	f000 f9b3 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3730      	adds	r7, #48	@ 0x30
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200001d4 	.word	0x200001d4
 8001510:	40000800 	.word	0x40000800

08001514 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_TIM6_Init+0x64>)
 8001526:	4a15      	ldr	r2, [pc, #84]	@ (800157c <MX_TIM6_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 125-1;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <MX_TIM6_Init+0x64>)
 800152c:	227c      	movs	r2, #124	@ 0x7c
 800152e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_TIM6_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64000-1;
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <MX_TIM6_Init+0x64>)
 8001538:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800153c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_TIM6_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <MX_TIM6_Init+0x64>)
 8001546:	f004 fc91 	bl	8005e6c <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001550:	f000 f98a 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_TIM6_Init+0x64>)
 8001562:	f005 febf 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800156c:	f000 f97c 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000220 	.word	0x20000220
 800157c:	40001000 	.word	0x40001000

08001580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 8001586:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <MX_USART2_UART_Init+0x5c>)
 8001588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015c4:	f005 ff34 	bl	8007430 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 f94b 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000026c 	.word	0x2000026c
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 80015e6:	4a15      	ldr	r2, [pc, #84]	@ (800163c <MX_USART3_UART_Init+0x5c>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015ea:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 80015ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_USART3_UART_Init+0x58>)
 8001624:	f005 ff04 	bl	8007430 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 f91b 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002f4 	.word	0x200002f4
 800163c:	40004800 	.word	0x40004800

08001640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_DMA_Init+0x38>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800164a:	4a0b      	ldr	r2, [pc, #44]	@ (8001678 <MX_DMA_Init+0x38>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6493      	str	r3, [r2, #72]	@ 0x48
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_DMA_Init+0x38>)
 8001654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	200b      	movs	r0, #11
 8001664:	f002 fcd9 	bl	800401a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001668:	200b      	movs	r0, #11
 800166a:	f002 fcf2 	bl	8004052 <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b44      	ldr	r3, [pc, #272]	@ (80017a4 <MX_GPIO_Init+0x128>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a43      	ldr	r2, [pc, #268]	@ (80017a4 <MX_GPIO_Init+0x128>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b41      	ldr	r3, [pc, #260]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	4b3e      	ldr	r3, [pc, #248]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a3d      	ldr	r2, [pc, #244]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b3b      	ldr	r3, [pc, #236]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a37      	ldr	r2, [pc, #220]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b35      	ldr	r3, [pc, #212]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b32      	ldr	r3, [pc, #200]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a31      	ldr	r2, [pc, #196]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <MX_GPIO_Init+0x128>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fa:	f003 f867 	bl	80047cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Cmde_DirG_Pin|IR1_Pin|IR2_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f249 0104 	movw	r1, #36868	@ 0x9004
 8001704:	4828      	ldr	r0, [pc, #160]	@ (80017a8 <MX_GPIO_Init+0x12c>)
 8001706:	f003 f861 	bl	80047cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001710:	4826      	ldr	r0, [pc, #152]	@ (80017ac <MX_GPIO_Init+0x130>)
 8001712:	f003 f85b 	bl	80047cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800171c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	481f      	ldr	r0, [pc, #124]	@ (80017ac <MX_GPIO_Init+0x130>)
 800172e:	f002 fea3 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001732:	2320      	movs	r3, #32
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174c:	f002 fe94 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cmde_DirG_Pin IR1_Pin IR2_Pin */
  GPIO_InitStruct.Pin = Cmde_DirG_Pin|IR1_Pin|IR2_Pin;
 8001750:	f249 0304 	movw	r3, #36868	@ 0x9004
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480f      	ldr	r0, [pc, #60]	@ (80017a8 <MX_GPIO_Init+0x12c>)
 800176a:	f002 fe85 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cmde_DirD_Pin */
  GPIO_InitStruct.Pin = Cmde_DirD_Pin;
 800176e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Cmde_DirD_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4809      	ldr	r0, [pc, #36]	@ (80017ac <MX_GPIO_Init+0x130>)
 8001788:	f002 fe76 	bl	8004478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2028      	movs	r0, #40	@ 0x28
 8001792:	f002 fc42 	bl	800401a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001796:	2028      	movs	r0, #40	@ 0x28
 8001798:	f002 fc5b 	bl	8004052 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000400 	.word	0x48000400
 80017ac:	48000800 	.word	0x48000800

080017b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017c0:	d10a      	bne.n	80017d8 <HAL_GPIO_EXTI_Callback+0x28>
    GO = !GO;
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80017d6:	701a      	strb	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	2000037c 	.word	0x2000037c

080017e8 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a06      	ldr	r2, [pc, #24]	@ (8001810 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d105      	bne.n	8001806 <HAL_ADC_LevelOutOfWindowCallback+0x1e>
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2120      	movs	r1, #32
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001802:	f002 ffe3 	bl	80047cc <HAL_GPIO_WritePin>
    }
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	50040000 	.word	0x50040000

08001814 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d114      	bne.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  if (GO)
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00f      	beq.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		Tbatt++;
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	3301      	adds	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800183c:	701a      	strb	r2, [r3, #0]
		T++;
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001846:	6013      	str	r3, [r2, #0]
		mesure_vitesse();
 8001848:	f7ff f998 	bl	8000b7c <mesure_vitesse>
		pid_vitesse();
 800184c:	f7ff f9f4 	bl	8000c38 <pid_vitesse>
	  }
  }
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40001000 	.word	0x40001000
 800185c:	2000037c 	.word	0x2000037c
 8001860:	2000037d 	.word	0x2000037d
 8001864:	20000380 	.word	0x20000380

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <Error_Handler+0x8>

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_MspInit+0x44>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187e:	4a0e      	ldr	r2, [pc, #56]	@ (80018b8 <HAL_MspInit+0x44>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6613      	str	r3, [r2, #96]	@ 0x60
 8001886:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <HAL_MspInit+0x44>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_MspInit+0x44>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001896:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <HAL_MspInit+0x44>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	@ 0x58
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_MspInit+0x44>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ac      	sub	sp, #176	@ 0xb0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2288      	movs	r2, #136	@ 0x88
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f006 fb87 	bl	8007ff0 <memset>
  if(hadc->Instance==ADC1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a40      	ldr	r2, [pc, #256]	@ (80019e8 <HAL_ADC_MspInit+0x12c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d179      	bne.n	80019e0 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80018f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001902:	2308      	movs	r3, #8
 8001904:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001906:	2307      	movs	r3, #7
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001912:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fde9 	bl	80054f4 <HAL_RCCEx_PeriphCLKConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001928:	f7ff ff9e 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800192c:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <HAL_ADC_MspInit+0x130>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001930:	4a2e      	ldr	r2, [pc, #184]	@ (80019ec <HAL_ADC_MspInit+0x130>)
 8001932:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001938:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <HAL_ADC_MspInit+0x130>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001944:	4b29      	ldr	r3, [pc, #164]	@ (80019ec <HAL_ADC_MspInit+0x130>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	4a28      	ldr	r2, [pc, #160]	@ (80019ec <HAL_ADC_MspInit+0x130>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001950:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <HAL_ADC_MspInit+0x130>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 800195c:	232c      	movs	r3, #44	@ 0x2c
 800195e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001962:	230b      	movs	r3, #11
 8001964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001972:	4619      	mov	r1, r3
 8001974:	481e      	ldr	r0, [pc, #120]	@ (80019f0 <HAL_ADC_MspInit+0x134>)
 8001976:	f002 fd7f 	bl	8004478 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 800197c:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_ADC_MspInit+0x13c>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001980:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 800199a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019b4:	480f      	ldr	r0, [pc, #60]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 80019b6:	f002 fb67 	bl	8004088 <HAL_DMA_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80019c0:	f7ff ff52 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a0b      	ldr	r2, [pc, #44]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 80019c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_ADC_MspInit+0x138>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2012      	movs	r0, #18
 80019d6:	f002 fb20 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019da:	2012      	movs	r0, #18
 80019dc:	f002 fb39 	bl	8004052 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019e0:	bf00      	nop
 80019e2:	37b0      	adds	r7, #176	@ 0xb0
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	50040000 	.word	0x50040000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000800 	.word	0x48000800
 80019f4:	200000f4 	.word	0x200000f4
 80019f8:	40020008 	.word	0x40020008

080019fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0c:	d113      	bne.n	8001a36 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <HAL_TIM_PWM_MspInit+0x44>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <HAL_TIM_PWM_MspInit+0x44>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_TIM_PWM_MspInit+0x44>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	201c      	movs	r0, #28
 8001a2c:	f002 faf5 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a30:	201c      	movs	r0, #28
 8001a32:	f002 fb0e 	bl	8004052 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2e      	ldr	r2, [pc, #184]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d129      	bne.n	8001aba <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a66:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a72:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a27      	ldr	r2, [pc, #156]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23c0      	movs	r3, #192	@ 0xc0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab4:	f002 fce0 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ab8:	e02c      	b.n	8001b14 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a19      	ldr	r2, [pc, #100]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d127      	bne.n	8001b14 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001adc:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af4:	23c0      	movs	r3, #192	@ 0xc0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b04:	2302      	movs	r3, #2
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4806      	ldr	r0, [pc, #24]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001b10:	f002 fcb2 	bl	8004478 <HAL_GPIO_Init>
}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	@ 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40000800 	.word	0x40000800
 8001b28:	48000400 	.word	0x48000400

08001b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <HAL_TIM_Base_MspInit+0x44>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d113      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2036      	movs	r0, #54	@ 0x36
 8001b5c:	f002 fa5d 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b60:	2036      	movs	r0, #54	@ 0x36
 8001b62:	f002 fa76 	bl	8004052 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40001000 	.word	0x40001000
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	@ 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b98:	d13a      	bne.n	8001c10 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_TIM_MspPostInit+0xa0>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c18 <HAL_TIM_MspPostInit+0xa0>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_TIM_MspPostInit+0xa0>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_TIM_MspPostInit+0xa0>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <HAL_TIM_MspPostInit+0xa0>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_TIM_MspPostInit+0xa0>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMD_Pin;
 8001bca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWMD_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <HAL_TIM_MspPostInit+0xa4>)
 8001be8:	f002 fc46 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWMG_Pin;
 8001bec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWMG_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0c:	f002 fc34 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	@ 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ae      	sub	sp, #184	@ 0xb8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	2288      	movs	r2, #136	@ 0x88
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 f9d5 	bl	8007ff0 <memset>
  if(huart->Instance==USART2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a42      	ldr	r2, [pc, #264]	@ (8001d54 <HAL_UART_MspInit+0x134>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d13c      	bne.n	8001cca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fc49 	bl	80054f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c68:	f7ff fdfe 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	4a39      	ldr	r2, [pc, #228]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c78:	4b37      	ldr	r3, [pc, #220]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b34      	ldr	r3, [pc, #208]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c88:	4a33      	ldr	r2, [pc, #204]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c90:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc4:	f002 fbd8 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cc8:	e040      	b.n	8001d4c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a23      	ldr	r2, [pc, #140]	@ (8001d5c <HAL_UART_MspInit+0x13c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d13b      	bne.n	8001d4c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fc07 	bl	80054f4 <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001cec:	f7ff fdbc 	bl	8001868 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf0:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	4a18      	ldr	r2, [pc, #96]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfc:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0c:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d14:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_UART_MspInit+0x138>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d20:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <HAL_UART_MspInit+0x140>)
 8001d48:	f002 fb96 	bl	8004478 <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	37b8      	adds	r7, #184	@ 0xb8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40004400 	.word	0x40004400
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40004800 	.word	0x40004800
 8001d60:	48000800 	.word	0x48000800

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f000 f901 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <DMA1_Channel1_IRQHandler+0x10>)
 8001dca:	f002 fa75 	bl	80042b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200000f4 	.word	0x200000f4

08001dd8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <ADC1_2_IRQHandler+0x10>)
 8001dde:	f000 fde9 	bl	80029b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000090 	.word	0x20000090

08001dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <TIM2_IRQHandler+0x10>)
 8001df2:	f004 fb2d 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000013c 	.word	0x2000013c

08001e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e08:	f002 fcf8 	bl	80047fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <TIM6_DAC_IRQHandler+0x10>)
 8001e16:	f004 fb1b 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000220 	.word	0x20000220

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f006 f8d4 	bl	8008000 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20018000 	.word	0x20018000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	200003c0 	.word	0x200003c0
 8001e8c:	20000510 	.word	0x20000510

08001e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb8:	f7ff ffea 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	@ (8001ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <LoopForever+0xe>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f00 <LoopForever+0x16>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f006 f893 	bl	800800c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee6:	f7ff f86d 	bl	8000fc4 <main>

08001eea <LoopForever>:

LoopForever:
    b LoopForever
 8001eea:	e7fe      	b.n	8001eea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ef8:	080089b4 	.word	0x080089b4
  ldr r2, =_sbss
 8001efc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f00:	20000510 	.word	0x20000510

08001f04 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC3_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_Init+0x3c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <HAL_Init+0x3c>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f002 f870 	bl	8004004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 f80f 	bl	8001f48 <HAL_InitTick>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	e001      	b.n	8001f3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f36:	f7ff fc9d 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_InitTick+0x6c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f5c:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_InitTick+0x70>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_InitTick+0x6c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 f87b 	bl	800406e <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d809      	bhi.n	8001f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f002 f845 	bl	800401a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f90:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <HAL_InitTick+0x74>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e004      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e001      	b.n	8001fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000020 	.word	0x20000020
 8001fb8:	20000018 	.word	0x20000018
 8001fbc:	2000001c 	.word	0x2000001c

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000020 	.word	0x20000020
 8001fe4:	200003c4 	.word	0x200003c4

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	200003c4 	.word	0x200003c4

08002000 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3360      	adds	r3, #96	@ 0x60
 800207a:	461a      	mov	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <LL_ADC_SetOffset+0x44>)
 800208a:	4013      	ands	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	4313      	orrs	r3, r2
 8002098:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	03fff000 	.word	0x03fff000

080020b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3360      	adds	r3, #96	@ 0x60
 80020be:	461a      	mov	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3360      	adds	r3, #96	@ 0x60
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	431a      	orrs	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3330      	adds	r3, #48	@ 0x30
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	211f      	movs	r1, #31
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 011f 	and.w	r1, r3, #31
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	431a      	orrs	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002184:	bf00      	nop
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3314      	adds	r3, #20
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0e5b      	lsrs	r3, r3, #25
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0d1b      	lsrs	r3, r3, #20
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2107      	movs	r1, #7
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0d1b      	lsrs	r3, r3, #20
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	431a      	orrs	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0318 	and.w	r3, r3, #24
 800222e:	4908      	ldr	r1, [pc, #32]	@ (8002250 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002230:	40d9      	lsrs	r1, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	400b      	ands	r3, r1
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	431a      	orrs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	0007ffff 	.word	0x0007ffff

08002254 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	330c      	adds	r3, #12
 8002264:	4618      	mov	r0, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0d1b      	lsrs	r3, r3, #20
 800226a:	f003 0103 	and.w	r1, r3, #3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0201 	and.w	r2, r3, #1
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4403      	add	r3, r0
 8002282:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
 800228e:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8002292:	43db      	mvns	r3, r3
 8002294:	401a      	ands	r2, r3
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	400b      	ands	r3, r1
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b087      	sub	sp, #28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3320      	adds	r3, #32
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	0d1b      	lsrs	r3, r3, #20
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0419      	lsls	r1, r3, #16
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	430b      	orrs	r3, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 031f 	and.w	r3, r3, #31
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800233a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6093      	str	r3, [r2, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800235e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002362:	d101      	bne.n	8002368 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002386:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800238a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023b2:	d101      	bne.n	80023b8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <LL_ADC_IsEnabled+0x18>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <LL_ADC_IsEnabled+0x1a>
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002424:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002428:	f043 0204 	orr.w	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d101      	bne.n	8002454 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d101      	bne.n	800247a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2280      	movs	r2, #128	@ 0x80
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	605a      	str	r2, [r3, #4]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	605a      	str	r2, [r3, #4]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	605a      	str	r2, [r3, #4]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	605a      	str	r2, [r3, #4]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	605a      	str	r2, [r3, #4]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b089      	sub	sp, #36	@ 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e130      	b.n	8002818 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff f979 	bl	80018bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff feb6 	bl	800234e <LL_ADC_IsDeepPowerDownEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe9c 	bl	800232a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fed1 	bl	800239e <LL_ADC_IsInternalRegulatorEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff feb5 	bl	8002376 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260c:	4b84      	ldr	r3, [pc, #528]	@ (8002820 <HAL_ADC_Init+0x284>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	4a84      	ldr	r2, [pc, #528]	@ (8002824 <HAL_ADC_Init+0x288>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	3301      	adds	r3, #1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002620:	e002      	b.n	8002628 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3b01      	subs	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff feb3 	bl	800239e <LL_ADC_IsInternalRegulatorEnabled>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff feec 	bl	800243c <LL_ADC_REG_IsConversionOngoing>
 8002664:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 80c9 	bne.w	8002806 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80c5 	bne.w	8002806 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002684:	f043 0202 	orr.w	r2, r3, #2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff feac 	bl	80023ee <LL_ADC_IsEnabled>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d115      	bne.n	80026c8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800269c:	4862      	ldr	r0, [pc, #392]	@ (8002828 <HAL_ADC_Init+0x28c>)
 800269e:	f7ff fea6 	bl	80023ee <LL_ADC_IsEnabled>
 80026a2:	4604      	mov	r4, r0
 80026a4:	4861      	ldr	r0, [pc, #388]	@ (800282c <HAL_ADC_Init+0x290>)
 80026a6:	f7ff fea2 	bl	80023ee <LL_ADC_IsEnabled>
 80026aa:	4603      	mov	r3, r0
 80026ac:	431c      	orrs	r4, r3
 80026ae:	4860      	ldr	r0, [pc, #384]	@ (8002830 <HAL_ADC_Init+0x294>)
 80026b0:	f7ff fe9d 	bl	80023ee <LL_ADC_IsEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4323      	orrs	r3, r4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4619      	mov	r1, r3
 80026c2:	485c      	ldr	r0, [pc, #368]	@ (8002834 <HAL_ADC_Init+0x298>)
 80026c4:	f7ff fc9c 	bl	8002000 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e5b      	ldrb	r3, [r3, #25]
 80026cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	3b01      	subs	r3, #1
 80026fc:	045b      	lsls	r3, r3, #17
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	4b44      	ldr	r3, [pc, #272]	@ (8002838 <HAL_ADC_Init+0x29c>)
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	430b      	orrs	r3, r1
 8002732:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe92 	bl	8002462 <LL_ADC_INJ_IsConversionOngoing>
 800273e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d13d      	bne.n	80027c2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d13a      	bne.n	80027c2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002750:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002758:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002768:	f023 0302 	bic.w	r3, r3, #2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	430b      	orrs	r3, r1
 8002774:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800277c:	2b01      	cmp	r3, #1
 800277e:	d118      	bne.n	80027b2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002796:	4311      	orrs	r1, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800279c:	4311      	orrs	r1, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027a2:	430a      	orrs	r2, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	611a      	str	r2, [r3, #16]
 80027b0:	e007      	b.n	80027c2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10c      	bne.n	80027e4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	f023 010f 	bic.w	r1, r3, #15
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e2:	e007      	b.n	80027f4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020f 	bic.w	r2, r2, #15
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f023 0303 	bic.w	r3, r3, #3
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54
 8002804:	e007      	b.n	8002816 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280a:	f043 0210 	orr.w	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002816:	7ffb      	ldrb	r3, [r7, #31]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3724      	adds	r7, #36	@ 0x24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd90      	pop	{r4, r7, pc}
 8002820:	20000018 	.word	0x20000018
 8002824:	053e2d63 	.word	0x053e2d63
 8002828:	50040000 	.word	0x50040000
 800282c:	50040100 	.word	0x50040100
 8002830:	50040200 	.word	0x50040200
 8002834:	50040300 	.word	0x50040300
 8002838:	fff0c007 	.word	0xfff0c007

0800283c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002848:	4853      	ldr	r0, [pc, #332]	@ (8002998 <HAL_ADC_Start_DMA+0x15c>)
 800284a:	f7ff fd52 	bl	80022f2 <LL_ADC_GetMultimode>
 800284e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fdf1 	bl	800243c <LL_ADC_REG_IsConversionOngoing>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 8093 	bne.w	8002988 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_ADC_Start_DMA+0x34>
 800286c:	2302      	movs	r3, #2
 800286e:	e08e      	b.n	800298e <HAL_ADC_Start_DMA+0x152>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a47      	ldr	r2, [pc, #284]	@ (800299c <HAL_ADC_Start_DMA+0x160>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d008      	beq.n	8002894 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d002      	beq.n	8002894 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b09      	cmp	r3, #9
 8002892:	d172      	bne.n	800297a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f001 f8c3 	bl	8003a20 <ADC_Enable>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d165      	bne.n	8002970 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a38      	ldr	r2, [pc, #224]	@ (80029a0 <HAL_ADC_Start_DMA+0x164>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d002      	beq.n	80028c8 <HAL_ADC_Start_DMA+0x8c>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e000      	b.n	80028ca <HAL_ADC_Start_DMA+0x8e>
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <HAL_ADC_Start_DMA+0x168>)
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d002      	beq.n	80028d8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	f023 0206 	bic.w	r2, r3, #6
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80028fc:	e002      	b.n	8002904 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002908:	4a27      	ldr	r2, [pc, #156]	@ (80029a8 <HAL_ADC_Start_DMA+0x16c>)
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002910:	4a26      	ldr	r2, [pc, #152]	@ (80029ac <HAL_ADC_Start_DMA+0x170>)
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002918:	4a25      	ldr	r2, [pc, #148]	@ (80029b0 <HAL_ADC_Start_DMA+0x174>)
 800291a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	221c      	movs	r2, #28
 8002922:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0210 	orr.w	r2, r2, #16
 800293a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3340      	adds	r3, #64	@ 0x40
 8002956:	4619      	mov	r1, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f001 fc4c 	bl	80041f8 <HAL_DMA_Start_IT>
 8002960:	4603      	mov	r3, r0
 8002962:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fd53 	bl	8002414 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800296e:	e00d      	b.n	800298c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002978:	e008      	b.n	800298c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002986:	e001      	b.n	800298c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002988:	2302      	movs	r3, #2
 800298a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	50040300 	.word	0x50040300
 800299c:	50040200 	.word	0x50040200
 80029a0:	50040100 	.word	0x50040100
 80029a4:	50040000 	.word	0x50040000
 80029a8:	08003b2d 	.word	0x08003b2d
 80029ac:	08003c05 	.word	0x08003c05
 80029b0:	08003c21 	.word	0x08003c21

080029b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	@ 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d0:	4882      	ldr	r0, [pc, #520]	@ (8002bdc <HAL_ADC_IRQHandler+0x228>)
 80029d2:	f7ff fc8e 	bl	80022f2 <LL_ADC_GetMultimode>
 80029d6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d017      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x5e>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d012      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f001 f973 	bl	8003cf0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_ADC_IRQHandler+0x72>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8083 	beq.w	8002b38 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d07d      	beq.n	8002b38 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fb5a 	bl	8002112 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d062      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a5d      	ldr	r2, [pc, #372]	@ (8002be0 <HAL_ADC_IRQHandler+0x22c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d002      	beq.n	8002a74 <HAL_ADC_IRQHandler+0xc0>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e000      	b.n	8002a76 <HAL_ADC_IRQHandler+0xc2>
 8002a74:	4b5b      	ldr	r3, [pc, #364]	@ (8002be4 <HAL_ADC_IRQHandler+0x230>)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d008      	beq.n	8002a90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d002      	beq.n	8002a90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	d104      	bne.n	8002a9a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	e00c      	b.n	8002ab4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a50      	ldr	r2, [pc, #320]	@ (8002be0 <HAL_ADC_IRQHandler+0x22c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d002      	beq.n	8002aaa <HAL_ADC_IRQHandler+0xf6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_IRQHandler+0xf8>
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8002be4 <HAL_ADC_IRQHandler+0x230>)
 8002aac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d135      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d12e      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fcb3 	bl	800243c <LL_ADC_REG_IsConversionOngoing>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11a      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020c 	bic.w	r2, r2, #12
 8002aea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d112      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b10:	e00b      	b.n	8002b2a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f95c 	bl	8002de8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	220c      	movs	r2, #12
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x198>
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 809f 	beq.w	8002c96 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8099 	beq.w	8002c96 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b74:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fb05 	bl	8002190 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b86:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fac0 	bl	8002112 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b92:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_ADC_IRQHandler+0x22c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d002      	beq.n	8002ba4 <HAL_ADC_IRQHandler+0x1f0>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	e000      	b.n	8002ba6 <HAL_ADC_IRQHandler+0x1f2>
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_ADC_IRQHandler+0x230>)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d008      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d002      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b07      	cmp	r3, #7
 8002bbe:	d104      	bne.n	8002bca <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	623b      	str	r3, [r7, #32]
 8002bc8:	e013      	b.n	8002bf2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <HAL_ADC_IRQHandler+0x22c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x234>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_ADC_IRQHandler+0x236>
 8002bda:	bf00      	nop
 8002bdc:	50040300 	.word	0x50040300
 8002be0:	50040100 	.word	0x50040100
 8002be4:	50040000 	.word	0x50040000
 8002be8:	4b7d      	ldr	r3, [pc, #500]	@ (8002de0 <HAL_ADC_IRQHandler+0x42c>)
 8002bea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d047      	beq.n	8002c88 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x25e>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03f      	beq.n	8002c88 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d13a      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1c:	2b40      	cmp	r3, #64	@ 0x40
 8002c1e:	d133      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d12e      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fc17 	bl	8002462 <LL_ADC_INJ_IsConversionOngoing>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11a      	bne.n	8002c70 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c48:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d112      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c6e:	e00b      	b.n	8002c88 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c74:	f043 0210 	orr.w	r2, r3, #16
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f001 f809 	bl	8003ca0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2260      	movs	r2, #96	@ 0x60
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d011      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x310>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe fd96 	bl	80017e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2280      	movs	r2, #128	@ 0x80
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x340>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cdc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 ffef 	bl	8003cc8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d012      	beq.n	8002d24 <HAL_ADC_IRQHandler+0x370>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 ffe1 	bl	8003cdc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d036      	beq.n	8002d9c <HAL_ADC_IRQHandler+0x3e8>
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d031      	beq.n	8002d9c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d44:	e014      	b.n	8002d70 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d4c:	4825      	ldr	r0, [pc, #148]	@ (8002de4 <HAL_ADC_IRQHandler+0x430>)
 8002d4e:	f7ff fade 	bl	800230e <LL_ADC_GetMultiDMATransfer>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5c:	e008      	b.n	8002d70 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10e      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f83e 	bl	8002e10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d018      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x424>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	f043 0208 	orr.w	r2, r3, #8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 ff6e 	bl	8003cb4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002dd8:	bf00      	nop
 8002dda:	3728      	adds	r7, #40	@ 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	50040000 	.word	0x50040000
 8002de4:	50040300 	.word	0x50040300

08002de8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0b6      	sub	sp, #216	@ 0xd8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x22>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e3c9      	b.n	80035da <HAL_ADC_ConfigChannel+0x7b6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff faf2 	bl	800243c <LL_ADC_REG_IsConversionOngoing>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 83aa 	bne.w	80035b4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d824      	bhi.n	8002eba <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	3b02      	subs	r3, #2
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d81b      	bhi.n	8002eb2 <HAL_ADC_ConfigChannel+0x8e>
 8002e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e80 <HAL_ADC_ConfigChannel+0x5c>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002e91 	.word	0x08002e91
 8002e84:	08002e99 	.word	0x08002e99
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002ea9 	.word	0x08002ea9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e90:	230c      	movs	r3, #12
 8002e92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e96:	e010      	b.n	8002eba <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e98:	2312      	movs	r3, #18
 8002e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e9e:	e00c      	b.n	8002eba <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ea0:	2318      	movs	r3, #24
 8002ea2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ea6:	e008      	b.n	8002eba <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ea8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002eb0:	e003      	b.n	8002eba <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002eb8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002ec8:	f7ff f936 	bl	8002138 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fab3 	bl	800243c <LL_ADC_REG_IsConversionOngoing>
 8002ed6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fabf 	bl	8002462 <LL_ADC_INJ_IsConversionOngoing>
 8002ee4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 81a4 	bne.w	800323a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 819f 	bne.w	800323a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f7ff f954 	bl	80021b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d00a      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6919      	ldr	r1, [r3, #16]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f40:	f7ff f892 	bl	8002068 <LL_ADC_SetOffset>
 8002f44:	e179      	b.n	800323a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f8af 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x14e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f8a4 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	0e9b      	lsrs	r3, r3, #26
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	e01e      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x18c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff f899 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	e004      	b.n	8002fae <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002fa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x1a4>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	e018      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x1d6>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e004      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d106      	bne.n	800300c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f868 	bl	80020dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f84c 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 8003018:	4603      	mov	r3, r0
 800301a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x214>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff f841 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	f003 021f 	and.w	r2, r3, #31
 8003036:	e01e      	b.n	8003076 <HAL_ADC_ConfigChannel+0x252>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f836 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003056:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800305a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800305e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003066:	2320      	movs	r3, #32
 8003068:	e004      	b.n	8003074 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800306a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_ConfigChannel+0x26a>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	e018      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x29c>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80030a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80030aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e004      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80030b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d106      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f805 	bl	80020dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe ffe9 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 80030de:	4603      	mov	r3, r0
 80030e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x2da>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ffde 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	0e9b      	lsrs	r3, r3, #26
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	e01e      	b.n	800313c <HAL_ADC_ConfigChannel+0x318>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe ffd3 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800311c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003120:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e004      	b.n	800313a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x330>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	e014      	b.n	800317e <HAL_ADC_ConfigChannel+0x35a>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003162:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e004      	b.n	800317e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800317e:	429a      	cmp	r2, r3
 8003180:	d106      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe ffa6 	bl	80020dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2103      	movs	r1, #3
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe ff8a 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x398>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2103      	movs	r1, #3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe ff7f 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	e017      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3c8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2103      	movs	r1, #3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe ff74 	bl	80020b0 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80031d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80031d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e003      	b.n	80031ea <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80031e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x3e0>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	0e9b      	lsrs	r3, r3, #26
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	e011      	b.n	8003228 <HAL_ADC_ConfigChannel+0x404>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003214:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003216:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e003      	b.n	8003228 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003228:	429a      	cmp	r2, r3
 800322a:	d106      	bne.n	800323a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2200      	movs	r2, #0
 8003232:	2103      	movs	r1, #3
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe ff51 	bl	80020dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f8d5 	bl	80023ee <LL_ADC_IsEnabled>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 8140 	bne.w	80034cc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	461a      	mov	r2, r3
 800325a:	f7fe ffd7 	bl	800220c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4a8f      	ldr	r2, [pc, #572]	@ (80034a0 <HAL_ADC_ConfigChannel+0x67c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	f040 8131 	bne.w	80034cc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x46e>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0e9b      	lsrs	r3, r3, #26
 8003280:	3301      	adds	r3, #1
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2b09      	cmp	r3, #9
 8003288:	bf94      	ite	ls
 800328a:	2301      	movls	r3, #1
 800328c:	2300      	movhi	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e019      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x4a2>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80032a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80032a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e003      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80032ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2b09      	cmp	r3, #9
 80032be:	bf94      	ite	ls
 80032c0:	2301      	movls	r3, #1
 80032c2:	2300      	movhi	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d079      	beq.n	80033be <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x4c2>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	069b      	lsls	r3, r3, #26
 80032e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e4:	e015      	b.n	8003312 <HAL_ADC_ConfigChannel+0x4ee>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80032f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80032f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e003      	b.n	800330a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3301      	adds	r3, #1
 800330c:	069b      	lsls	r3, r3, #26
 800330e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x50e>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	3301      	adds	r3, #1
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	e017      	b.n	8003362 <HAL_ADC_ConfigChannel+0x53e>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003342:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800334a:	2320      	movs	r3, #32
 800334c:	e003      	b.n	8003356 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800334e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	ea42 0103 	orr.w	r1, r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x564>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	3301      	adds	r3, #1
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	051b      	lsls	r3, r3, #20
 8003386:	e018      	b.n	80033ba <HAL_ADC_ConfigChannel+0x596>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80033a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ba:	430b      	orrs	r3, r1
 80033bc:	e081      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <HAL_ADC_ConfigChannel+0x5b6>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	3301      	adds	r3, #1
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033d8:	e015      	b.n	8003406 <HAL_ADC_ConfigChannel+0x5e2>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80033ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80033f2:	2320      	movs	r3, #32
 80033f4:	e003      	b.n	80033fe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80033f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	069b      	lsls	r3, r3, #26
 8003402:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x602>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	3301      	adds	r3, #1
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	e017      	b.n	8003456 <HAL_ADC_ConfigChannel+0x632>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	61bb      	str	r3, [r7, #24]
  return result;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800343e:	2320      	movs	r3, #32
 8003440:	e003      	b.n	800344a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	ea42 0103 	orr.w	r1, r2, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x65e>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0e9b      	lsrs	r3, r3, #26
 800346c:	3301      	adds	r3, #1
 800346e:	f003 021f 	and.w	r2, r3, #31
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	3b1e      	subs	r3, #30
 800347a:	051b      	lsls	r3, r3, #20
 800347c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003480:	e01e      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x69c>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	60fb      	str	r3, [r7, #12]
  return result;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e006      	b.n	80034ac <HAL_ADC_ConfigChannel+0x688>
 800349e:	bf00      	nop
 80034a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	f003 021f 	and.w	r2, r3, #31
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	3b1e      	subs	r3, #30
 80034ba:	051b      	lsls	r3, r3, #20
 80034bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c6:	4619      	mov	r1, r3
 80034c8:	f7fe fe75 	bl	80021b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b44      	ldr	r3, [pc, #272]	@ (80035e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d07a      	beq.n	80035ce <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034d8:	4843      	ldr	r0, [pc, #268]	@ (80035e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80034da:	f7fe fdb7 	bl	800204c <LL_ADC_GetCommonPathInternalCh>
 80034de:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a41      	ldr	r2, [pc, #260]	@ (80035ec <HAL_ADC_ConfigChannel+0x7c8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d12c      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d126      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3c      	ldr	r2, [pc, #240]	@ (80035f0 <HAL_ADC_ConfigChannel+0x7cc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_ADC_ConfigChannel+0x6e8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3b      	ldr	r2, [pc, #236]	@ (80035f4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d15d      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800350c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003510:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003514:	4619      	mov	r1, r3
 8003516:	4834      	ldr	r0, [pc, #208]	@ (80035e8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003518:	f7fe fd85 	bl	8002026 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800351c:	4b36      	ldr	r3, [pc, #216]	@ (80035f8 <HAL_ADC_ConfigChannel+0x7d4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	4a36      	ldr	r2, [pc, #216]	@ (80035fc <HAL_ADC_ConfigChannel+0x7d8>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	099b      	lsrs	r3, r3, #6
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003536:	e002      	b.n	800353e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3b01      	subs	r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f9      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003544:	e040      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2d      	ldr	r2, [pc, #180]	@ (8003600 <HAL_ADC_ConfigChannel+0x7dc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d118      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003554:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d112      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a23      	ldr	r2, [pc, #140]	@ (80035f0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_ADC_ConfigChannel+0x74c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <HAL_ADC_ConfigChannel+0x7d0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d12d      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003570:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003574:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003578:	4619      	mov	r1, r3
 800357a:	481b      	ldr	r0, [pc, #108]	@ (80035e8 <HAL_ADC_ConfigChannel+0x7c4>)
 800357c:	f7fe fd53 	bl	8002026 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003580:	e024      	b.n	80035cc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <HAL_ADC_ConfigChannel+0x7e0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d120      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800358c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11a      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <HAL_ADC_ConfigChannel+0x7cc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d115      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035aa:	4619      	mov	r1, r3
 80035ac:	480e      	ldr	r0, [pc, #56]	@ (80035e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80035ae:	f7fe fd3a 	bl	8002026 <LL_ADC_SetCommonPathInternalCh>
 80035b2:	e00c      	b.n	80035ce <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80035c6:	e002      	b.n	80035ce <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80035d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035da:	4618      	mov	r0, r3
 80035dc:	37d8      	adds	r7, #216	@ 0xd8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	80080000 	.word	0x80080000
 80035e8:	50040300 	.word	0x50040300
 80035ec:	c7520000 	.word	0xc7520000
 80035f0:	50040000 	.word	0x50040000
 80035f4:	50040200 	.word	0x50040200
 80035f8:	20000018 	.word	0x20000018
 80035fc:	053e2d63 	.word	0x053e2d63
 8003600:	cb840000 	.word	0xcb840000
 8003604:	80000001 	.word	0x80000001

08003608 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08e      	sub	sp, #56	@ 0x38
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003620:	d003      	beq.n	800362a <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003626:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_ADC_AnalogWDGConfig+0x30>
 8003634:	2302      	movs	r3, #2
 8003636:	e1ec      	b.n	8003a12 <HAL_ADC_AnalogWDGConfig+0x40a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fef9 	bl	800243c <LL_ADC_REG_IsConversionOngoing>
 800364a:	6338      	str	r0, [r7, #48]	@ 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe ff06 	bl	8002462 <LL_ADC_INJ_IsConversionOngoing>
 8003656:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 81ca 	bne.w	80039f4 <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 81c6 	bne.w	80039f4 <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a9b      	ldr	r2, [pc, #620]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f040 80a2 	bne.w	80037b8 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800367c:	d034      	beq.n	80036e8 <HAL_ADC_AnalogWDGConfig+0xe0>
 800367e:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8003682:	d856      	bhi.n	8003732 <HAL_ADC_AnalogWDGConfig+0x12a>
 8003684:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003688:	d04b      	beq.n	8003722 <HAL_ADC_AnalogWDGConfig+0x11a>
 800368a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800368e:	d850      	bhi.n	8003732 <HAL_ADC_AnalogWDGConfig+0x12a>
 8003690:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8003694:	d01b      	beq.n	80036ce <HAL_ADC_AnalogWDGConfig+0xc6>
 8003696:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800369a:	d84a      	bhi.n	8003732 <HAL_ADC_AnalogWDGConfig+0x12a>
 800369c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a0:	d037      	beq.n	8003712 <HAL_ADC_AnalogWDGConfig+0x10a>
 80036a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a6:	d844      	bhi.n	8003732 <HAL_ADC_AnalogWDGConfig+0x12a>
 80036a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ac:	d029      	beq.n	8003702 <HAL_ADC_AnalogWDGConfig+0xfa>
 80036ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036b2:	d13e      	bne.n	8003732 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80036c0:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80036c4:	461a      	mov	r2, r3
 80036c6:	4985      	ldr	r1, [pc, #532]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80036c8:	f7fe fdc4 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80036cc:	e039      	b.n	8003742 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80036da:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 80036de:	461a      	mov	r2, r3
 80036e0:	497e      	ldr	r1, [pc, #504]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80036e2:	f7fe fdb7 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80036e6:	e02c      	b.n	8003742 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80036f4:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80036f8:	461a      	mov	r2, r3
 80036fa:	4978      	ldr	r1, [pc, #480]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80036fc:	f7fe fdaa 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8003700:	e01f      	b.n	8003742 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a76      	ldr	r2, [pc, #472]	@ (80038e0 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8003708:	4974      	ldr	r1, [pc, #464]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fda2 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8003710:	e017      	b.n	8003742 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a73      	ldr	r2, [pc, #460]	@ (80038e4 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8003718:	4970      	ldr	r1, [pc, #448]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fd9a 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8003720:	e00f      	b.n	8003742 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a70      	ldr	r2, [pc, #448]	@ (80038e8 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8003728:	496c      	ldr	r1, [pc, #432]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fd92 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8003730:	e007      	b.n	8003742 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	4968      	ldr	r1, [pc, #416]	@ (80038dc <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fd8a 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8003740:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	08db      	lsrs	r3, r3, #3
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	08db      	lsrs	r3, r3, #3
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800377e:	f7fe fd96 	bl	80022ae <LL_ADC_ConfigAnalogWDThresholds>
                                      tmp_awd_low_threshold_shifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003786:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fe78 	bl	8002488 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	7b1b      	ldrb	r3, [r3, #12]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d105      	bne.n	80037ac <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fe98 	bl	80024da <LL_ADC_EnableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80037aa:	e12c      	b.n	8003a06 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fec2 	bl	800253a <LL_ADC_DisableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80037b6:	e126      	b.n	8003a06 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80037c0:	d01d      	beq.n	80037fe <HAL_ADC_AnalogWDGConfig+0x1f6>
 80037c2:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80037c6:	f200 8093 	bhi.w	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80037ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ce:	d07b      	beq.n	80038c8 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80037d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037d4:	f200 808c 	bhi.w	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80037d8:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80037dc:	d00f      	beq.n	80037fe <HAL_ADC_AnalogWDGConfig+0x1f6>
 80037de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80037e2:	f200 8085 	bhi.w	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80037e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ea:	d06d      	beq.n	80038c8 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80037ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f0:	d87e      	bhi.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80037f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037f6:	d067      	beq.n	80038c8 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80037f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80037fc:	d178      	bne.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a3a      	ldr	r2, [pc, #232]	@ (80038ec <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d12f      	bne.n	8003868 <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <HAL_ADC_AnalogWDGConfig+0x21e>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2201      	movs	r2, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	e016      	b.n	8003854 <HAL_ADC_AnalogWDGConfig+0x24c>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	61bb      	str	r3, [r7, #24]
  return result;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 800383e:	2320      	movs	r3, #32
 8003840:	e003      	b.n	800384a <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2201      	movs	r2, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8003866:	e04c      	b.n	8003902 <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR,
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <HAL_ADC_AnalogWDGConfig+0x27e>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	e016      	b.n	80038b4 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	60fb      	str	r3, [r7, #12]
  return result;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 800389e:	2320      	movs	r3, #32
 80038a0:	e003      	b.n	80038aa <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2201      	movs	r2, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80038c6:	e01c      	b.n	8003902 <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80038d0:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7fe fcbe 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80038d8:	e013      	b.n	8003902 <HAL_ADC_AnalogWDGConfig+0x2fa>
 80038da:	bf00      	nop
 80038dc:	7dc00000 	.word	0x7dc00000
 80038e0:	0087ffff 	.word	0x0087ffff
 80038e4:	0107ffff 	.word	0x0107ffff
 80038e8:	0187ffff 	.word	0x0187ffff
 80038ec:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7fe fcaa 	bl	8002254 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8003900:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0318 	and.w	r3, r3, #24
 800390c:	2b18      	cmp	r3, #24
 800390e:	d00f      	beq.n	8003930 <HAL_ADC_AnalogWDGConfig+0x328>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	f1c3 0302 	rsb	r3, r3, #2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	f003 031e 	and.w	r3, r3, #30
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	e002      	b.n	8003936 <HAL_ADC_AnalogWDGConfig+0x32e>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0318 	and.w	r3, r3, #24
 8003942:	2b18      	cmp	r3, #24
 8003944:	d00f      	beq.n	8003966 <HAL_ADC_AnalogWDGConfig+0x35e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	f1c3 0302 	rsb	r3, r3, #2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	f003 031e 	and.w	r3, r3, #30
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
 8003964:	e002      	b.n	800396c <HAL_ADC_AnalogWDGConfig+0x364>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800397a:	f7fe fc98 	bl	80022ae <LL_ADC_ConfigAnalogWDThresholds>
                                      tmp_awd_low_threshold_shifted);

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a26      	ldr	r2, [pc, #152]	@ (8003a1c <HAL_ADC_AnalogWDGConfig+0x414>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d11a      	bne.n	80039be <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398c:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fd82 	bl	80024a2 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	7b1b      	ldrb	r3, [r3, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fda5 	bl	80024fa <LL_ADC_EnableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80039b0:	e029      	b.n	8003a06 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fdcf 	bl	800255a <LL_ADC_DisableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80039bc:	e023      	b.n	8003a06 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fd75 	bl	80024be <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	7b1b      	ldrb	r3, [r3, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fd9a 	bl	800251a <LL_ADC_EnableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80039e6:	e00e      	b.n	8003a06 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fdc4 	bl	800257a <LL_ADC_DisableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80039f2:	e008      	b.n	8003a06 <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3738      	adds	r7, #56	@ 0x38
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0017ffff 	.word	0x0017ffff

08003a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fcdc 	bl	80023ee <LL_ADC_IsEnabled>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d169      	bne.n	8003b10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	4b36      	ldr	r3, [pc, #216]	@ (8003b1c <ADC_Enable+0xfc>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00d      	beq.n	8003a66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e055      	b.n	8003b12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fcab 	bl	80023c6 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a70:	482b      	ldr	r0, [pc, #172]	@ (8003b20 <ADC_Enable+0x100>)
 8003a72:	f7fe faeb 	bl	800204c <LL_ADC_GetCommonPathInternalCh>
 8003a76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a80:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <ADC_Enable+0x104>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	4a28      	ldr	r2, [pc, #160]	@ (8003b28 <ADC_Enable+0x108>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a9a:	e002      	b.n	8003aa2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f9      	bne.n	8003a9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fa9e 	bl	8001fe8 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aae:	e028      	b.n	8003b02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fc9a 	bl	80023ee <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fc7e 	bl	80023c6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aca:	f7fe fa8d 	bl	8001fe8 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d914      	bls.n	8003b02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d00d      	beq.n	8003b02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d1cf      	bne.n	8003ab0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	8000003f 	.word	0x8000003f
 8003b20:	50040300 	.word	0x50040300
 8003b24:	20000018 	.word	0x20000018
 8003b28:	053e2d63 	.word	0x053e2d63

08003b2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d14b      	bne.n	8003bde <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d021      	beq.n	8003ba4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fad4 	bl	8002112 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d032      	beq.n	8003bd6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d12b      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ba2:	e018      	b.n	8003bd6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d111      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff f906 	bl	8002de8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bdc:	e00e      	b.n	8003bfc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff f910 	bl	8002e10 <HAL_ADC_ErrorCallback>
}
 8003bf0:	e004      	b.n	8003bfc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff f8f2 	bl	8002dfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	f043 0204 	orr.w	r2, r3, #4
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff f8e2 	bl	8002e10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LL_ADC_IsEnabled>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <LL_ADC_IsEnabled+0x18>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <LL_ADC_IsEnabled+0x1a>
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d101      	bne.n	8003c92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b09f      	sub	sp, #124	@ 0x7c
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e093      	b.n	8003e4a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a47      	ldr	r2, [pc, #284]	@ (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d102      	bne.n	8003d42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d3c:	4b46      	ldr	r3, [pc, #280]	@ (8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	e001      	b.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e072      	b.n	8003e4a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff ff87 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d6c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff81 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d154      	bne.n	8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d151      	bne.n	8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d84:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003d86:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02c      	beq.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003da2:	035b      	lsls	r3, r3, #13
 8003da4:	430b      	orrs	r3, r1
 8003da6:	431a      	orrs	r2, r3
 8003da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003daa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dac:	4829      	ldr	r0, [pc, #164]	@ (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dae:	f7ff ff51 	bl	8003c54 <LL_ADC_IsEnabled>
 8003db2:	4604      	mov	r4, r0
 8003db4:	4828      	ldr	r0, [pc, #160]	@ (8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003db6:	f7ff ff4d 	bl	8003c54 <LL_ADC_IsEnabled>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	431c      	orrs	r4, r3
 8003dbe:	4828      	ldr	r0, [pc, #160]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003dc0:	f7ff ff48 	bl	8003c54 <LL_ADC_IsEnabled>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4323      	orrs	r3, r4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d137      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dd4:	f023 030f 	bic.w	r3, r3, #15
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	6811      	ldr	r1, [r2, #0]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	6892      	ldr	r2, [r2, #8]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	431a      	orrs	r2, r3
 8003de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003de6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003de8:	e028      	b.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df6:	4817      	ldr	r0, [pc, #92]	@ (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003df8:	f7ff ff2c 	bl	8003c54 <LL_ADC_IsEnabled>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	4816      	ldr	r0, [pc, #88]	@ (8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e00:	f7ff ff28 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e04:	4603      	mov	r3, r0
 8003e06:	431c      	orrs	r4, r3
 8003e08:	4815      	ldr	r0, [pc, #84]	@ (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e0a:	f7ff ff23 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4323      	orrs	r3, r4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d112      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e1e:	f023 030f 	bic.w	r3, r3, #15
 8003e22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e26:	e009      	b.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e3a:	e000      	b.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e46:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	377c      	adds	r7, #124	@ 0x7c
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd90      	pop	{r4, r7, pc}
 8003e52:	bf00      	nop
 8003e54:	50040000 	.word	0x50040000
 8003e58:	50040100 	.word	0x50040100
 8003e5c:	50040300 	.word	0x50040300
 8003e60:	50040200 	.word	0x50040200

08003e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e80:	4013      	ands	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e96:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	60d3      	str	r3, [r2, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb0:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	f003 0307 	and.w	r3, r3, #7
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	db0b      	blt.n	8003ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4907      	ldr	r1, [pc, #28]	@ (8003f00 <__NVIC_EnableIRQ+0x38>)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2001      	movs	r0, #1
 8003eea:	fa00 f202 	lsl.w	r2, r0, r2
 8003eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000e100 	.word	0xe000e100

08003f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	db0a      	blt.n	8003f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	490c      	ldr	r1, [pc, #48]	@ (8003f50 <__NVIC_SetPriority+0x4c>)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	440b      	add	r3, r1
 8003f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f2c:	e00a      	b.n	8003f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4908      	ldr	r1, [pc, #32]	@ (8003f54 <__NVIC_SetPriority+0x50>)
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	3b04      	subs	r3, #4
 8003f3c:	0112      	lsls	r2, r2, #4
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	440b      	add	r3, r1
 8003f42:	761a      	strb	r2, [r3, #24]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000e100 	.word	0xe000e100
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	@ 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f1c3 0307 	rsb	r3, r3, #7
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	bf28      	it	cs
 8003f76:	2304      	movcs	r3, #4
 8003f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d902      	bls.n	8003f88 <NVIC_EncodePriority+0x30>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3b03      	subs	r3, #3
 8003f86:	e000      	b.n	8003f8a <NVIC_EncodePriority+0x32>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43da      	mvns	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	4313      	orrs	r3, r2
         );
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3724      	adds	r7, #36	@ 0x24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fd0:	d301      	bcc.n	8003fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00f      	b.n	8003ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <SysTick_Config+0x40>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fde:	210f      	movs	r1, #15
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	f7ff ff8e 	bl	8003f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe8:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <SysTick_Config+0x40>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fee:	4b04      	ldr	r3, [pc, #16]	@ (8004000 <SysTick_Config+0x40>)
 8003ff0:	2207      	movs	r2, #7
 8003ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	e000e010 	.word	0xe000e010

08004004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff29 	bl	8003e64 <__NVIC_SetPriorityGrouping>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800402c:	f7ff ff3e 	bl	8003eac <__NVIC_GetPriorityGrouping>
 8004030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff8e 	bl	8003f58 <NVIC_EncodePriority>
 800403c:	4602      	mov	r2, r0
 800403e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff5d 	bl	8003f04 <__NVIC_SetPriority>
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800405c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff31 	bl	8003ec8 <__NVIC_EnableIRQ>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ffa2 	bl	8003fc0 <SysTick_Config>
 800407c:	4603      	mov	r3, r0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e098      	b.n	80041cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <HAL_DMA_Init+0x150>)
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d80f      	bhi.n	80040c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4b4b      	ldr	r3, [pc, #300]	@ (80041dc <HAL_DMA_Init+0x154>)
 80040ae:	4413      	add	r3, r2
 80040b0:	4a4b      	ldr	r2, [pc, #300]	@ (80041e0 <HAL_DMA_Init+0x158>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	009a      	lsls	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a48      	ldr	r2, [pc, #288]	@ (80041e4 <HAL_DMA_Init+0x15c>)
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80040c4:	e00e      	b.n	80040e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b46      	ldr	r3, [pc, #280]	@ (80041e8 <HAL_DMA_Init+0x160>)
 80040ce:	4413      	add	r3, r2
 80040d0:	4a43      	ldr	r2, [pc, #268]	@ (80041e0 <HAL_DMA_Init+0x158>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	009a      	lsls	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a42      	ldr	r2, [pc, #264]	@ (80041ec <HAL_DMA_Init+0x164>)
 80040e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800413e:	d039      	beq.n	80041b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	4a27      	ldr	r2, [pc, #156]	@ (80041e4 <HAL_DMA_Init+0x15c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d11a      	bne.n	8004180 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800414a:	4b29      	ldr	r3, [pc, #164]	@ (80041f0 <HAL_DMA_Init+0x168>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	f003 031c 	and.w	r3, r3, #28
 8004156:	210f      	movs	r1, #15
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	4924      	ldr	r1, [pc, #144]	@ (80041f0 <HAL_DMA_Init+0x168>)
 8004160:	4013      	ands	r3, r2
 8004162:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004164:	4b22      	ldr	r3, [pc, #136]	@ (80041f0 <HAL_DMA_Init+0x168>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004170:	f003 031c 	and.w	r3, r3, #28
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	491d      	ldr	r1, [pc, #116]	@ (80041f0 <HAL_DMA_Init+0x168>)
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
 800417e:	e019      	b.n	80041b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004180:	4b1c      	ldr	r3, [pc, #112]	@ (80041f4 <HAL_DMA_Init+0x16c>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004188:	f003 031c 	and.w	r3, r3, #28
 800418c:	210f      	movs	r1, #15
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	4917      	ldr	r1, [pc, #92]	@ (80041f4 <HAL_DMA_Init+0x16c>)
 8004196:	4013      	ands	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800419a:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <HAL_DMA_Init+0x16c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f003 031c 	and.w	r3, r3, #28
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	4911      	ldr	r1, [pc, #68]	@ (80041f4 <HAL_DMA_Init+0x16c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40020407 	.word	0x40020407
 80041dc:	bffdfff8 	.word	0xbffdfff8
 80041e0:	cccccccd 	.word	0xcccccccd
 80041e4:	40020000 	.word	0x40020000
 80041e8:	bffdfbf8 	.word	0xbffdfbf8
 80041ec:	40020400 	.word	0x40020400
 80041f0:	400200a8 	.word	0x400200a8
 80041f4:	400204a8 	.word	0x400204a8

080041f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Start_IT+0x20>
 8004214:	2302      	movs	r3, #2
 8004216:	e04b      	b.n	80042b0 <HAL_DMA_Start_IT+0xb8>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d13a      	bne.n	80042a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f8e0 	bl	8004416 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 020e 	orr.w	r2, r2, #14
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e00f      	b.n	8004290 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0204 	bic.w	r2, r2, #4
 800427e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 020a 	orr.w	r2, r2, #10
 800428e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e005      	b.n	80042ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	f003 031c 	and.w	r3, r3, #28
 80042d8:	2204      	movs	r2, #4
 80042da:	409a      	lsls	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d026      	beq.n	8004332 <HAL_DMA_IRQHandler+0x7a>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d021      	beq.n	8004332 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0204 	bic.w	r2, r2, #4
 800430a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004310:	f003 021c 	and.w	r2, r3, #28
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2104      	movs	r1, #4
 800431a:	fa01 f202 	lsl.w	r2, r1, r2
 800431e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004324:	2b00      	cmp	r3, #0
 8004326:	d071      	beq.n	800440c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004330:	e06c      	b.n	800440c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	f003 031c 	and.w	r3, r3, #28
 800433a:	2202      	movs	r2, #2
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d02e      	beq.n	80043a4 <HAL_DMA_IRQHandler+0xec>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d029      	beq.n	80043a4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 020a 	bic.w	r2, r2, #10
 800436c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f003 021c 	and.w	r2, r3, #28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	2102      	movs	r1, #2
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d038      	beq.n	800440c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043a2:	e033      	b.n	800440c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a8:	f003 031c 	and.w	r3, r3, #28
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d02a      	beq.n	800440e <HAL_DMA_IRQHandler+0x156>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d025      	beq.n	800440e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 020e 	bic.w	r2, r2, #14
 80043d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	f003 021c 	and.w	r2, r3, #28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f202 	lsl.w	r2, r1, r2
 80043e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800440c:	bf00      	nop
 800440e:	bf00      	nop
}
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004428:	f003 021c 	and.w	r2, r3, #28
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b10      	cmp	r3, #16
 8004446:	d108      	bne.n	800445a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004458:	e007      	b.n	800446a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	60da      	str	r2, [r3, #12]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004486:	e17f      	b.n	8004788 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	4013      	ands	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8171 	beq.w	8004782 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d005      	beq.n	80044b8 <HAL_GPIO_Init+0x40>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d130      	bne.n	800451a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ee:	2201      	movs	r2, #1
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0201 	and.w	r2, r3, #1
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d118      	bne.n	8004558 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800452c:	2201      	movs	r2, #1
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	08db      	lsrs	r3, r3, #3
 8004542:	f003 0201 	and.w	r2, r3, #1
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d123      	bne.n	80045e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	6939      	ldr	r1, [r7, #16]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80ac 	beq.w	8004782 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	4b5f      	ldr	r3, [pc, #380]	@ (80047a8 <HAL_GPIO_Init+0x330>)
 800462c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462e:	4a5e      	ldr	r2, [pc, #376]	@ (80047a8 <HAL_GPIO_Init+0x330>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6613      	str	r3, [r2, #96]	@ 0x60
 8004636:	4b5c      	ldr	r3, [pc, #368]	@ (80047a8 <HAL_GPIO_Init+0x330>)
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004642:	4a5a      	ldr	r2, [pc, #360]	@ (80047ac <HAL_GPIO_Init+0x334>)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	3302      	adds	r3, #2
 800464a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	220f      	movs	r2, #15
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800466c:	d025      	beq.n	80046ba <HAL_GPIO_Init+0x242>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a4f      	ldr	r2, [pc, #316]	@ (80047b0 <HAL_GPIO_Init+0x338>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <HAL_GPIO_Init+0x23e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4e      	ldr	r2, [pc, #312]	@ (80047b4 <HAL_GPIO_Init+0x33c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x23a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4d      	ldr	r2, [pc, #308]	@ (80047b8 <HAL_GPIO_Init+0x340>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x236>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4c      	ldr	r2, [pc, #304]	@ (80047bc <HAL_GPIO_Init+0x344>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x232>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4b      	ldr	r2, [pc, #300]	@ (80047c0 <HAL_GPIO_Init+0x348>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x22e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4a      	ldr	r2, [pc, #296]	@ (80047c4 <HAL_GPIO_Init+0x34c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x22a>
 800469e:	2306      	movs	r3, #6
 80046a0:	e00c      	b.n	80046bc <HAL_GPIO_Init+0x244>
 80046a2:	2307      	movs	r3, #7
 80046a4:	e00a      	b.n	80046bc <HAL_GPIO_Init+0x244>
 80046a6:	2305      	movs	r3, #5
 80046a8:	e008      	b.n	80046bc <HAL_GPIO_Init+0x244>
 80046aa:	2304      	movs	r3, #4
 80046ac:	e006      	b.n	80046bc <HAL_GPIO_Init+0x244>
 80046ae:	2303      	movs	r3, #3
 80046b0:	e004      	b.n	80046bc <HAL_GPIO_Init+0x244>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e002      	b.n	80046bc <HAL_GPIO_Init+0x244>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_GPIO_Init+0x244>
 80046ba:	2300      	movs	r3, #0
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	f002 0203 	and.w	r2, r2, #3
 80046c2:	0092      	lsls	r2, r2, #2
 80046c4:	4093      	lsls	r3, r2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046cc:	4937      	ldr	r1, [pc, #220]	@ (80047ac <HAL_GPIO_Init+0x334>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	3302      	adds	r3, #2
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046da:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046fe:	4a32      	ldr	r2, [pc, #200]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004704:	4b30      	ldr	r3, [pc, #192]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	43db      	mvns	r3, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004728:	4a27      	ldr	r2, [pc, #156]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800472e:	4b26      	ldr	r3, [pc, #152]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	43db      	mvns	r3, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4013      	ands	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004752:	4a1d      	ldr	r2, [pc, #116]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800477c:	4a12      	ldr	r2, [pc, #72]	@ (80047c8 <HAL_GPIO_Init+0x350>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3301      	adds	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	f47f ae78 	bne.w	8004488 <HAL_GPIO_Init+0x10>
  }
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40010000 	.word	0x40010000
 80047b0:	48000400 	.word	0x48000400
 80047b4:	48000800 	.word	0x48000800
 80047b8:	48000c00 	.word	0x48000c00
 80047bc:	48001000 	.word	0x48001000
 80047c0:	48001400 	.word	0x48001400
 80047c4:	48001800 	.word	0x48001800
 80047c8:	40010400 	.word	0x40010400

080047cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	807b      	strh	r3, [r7, #2]
 80047d8:	4613      	mov	r3, r2
 80047da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047dc:	787b      	ldrb	r3, [r7, #1]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047e2:	887a      	ldrh	r2, [r7, #2]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047e8:	e002      	b.n	80047f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004806:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004812:	4a05      	ldr	r2, [pc, #20]	@ (8004828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc ffc8 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40010400 	.word	0x40010400

0800482c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004830:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <HAL_PWREx_GetVoltageRange+0x18>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004838:	4618      	mov	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40007000 	.word	0x40007000

08004848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004856:	d130      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004858:	4b23      	ldr	r3, [pc, #140]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004864:	d038      	beq.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004866:	4b20      	ldr	r3, [pc, #128]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800486e:	4a1e      	ldr	r2, [pc, #120]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004870:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004876:	4b1d      	ldr	r3, [pc, #116]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2232      	movs	r2, #50	@ 0x32
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	4a1b      	ldr	r2, [pc, #108]	@ (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	0c9b      	lsrs	r3, r3, #18
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488c:	e002      	b.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3b01      	subs	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004894:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a0:	d102      	bne.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f2      	bne.n	800488e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a8:	4b0f      	ldr	r3, [pc, #60]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b4:	d110      	bne.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e00f      	b.n	80048da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c6:	d007      	beq.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048c8:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048d0:	4a05      	ldr	r2, [pc, #20]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40007000 	.word	0x40007000
 80048ec:	20000018 	.word	0x20000018
 80048f0:	431bde83 	.word	0x431bde83

080048f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e3ca      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004906:	4b97      	ldr	r3, [pc, #604]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004910:	4b94      	ldr	r3, [pc, #592]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80e4 	beq.w	8004af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_RCC_OscConfig+0x4a>
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b0c      	cmp	r3, #12
 8004932:	f040 808b 	bne.w	8004a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 8087 	bne.w	8004a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800493e:	4b89      	ldr	r3, [pc, #548]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e3a2      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	4b82      	ldr	r3, [pc, #520]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <HAL_RCC_OscConfig+0x7c>
 8004966:	4b7f      	ldr	r3, [pc, #508]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800496e:	e005      	b.n	800497c <HAL_RCC_OscConfig+0x88>
 8004970:	4b7c      	ldr	r3, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800497c:	4293      	cmp	r3, r2
 800497e:	d223      	bcs.n	80049c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fd55 	bl	8005434 <RCC_SetFlashLatencyFromMSIRange>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e383      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004994:	4b73      	ldr	r3, [pc, #460]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a72      	ldr	r2, [pc, #456]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 800499a:	f043 0308 	orr.w	r3, r3, #8
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b70      	ldr	r3, [pc, #448]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	496d      	ldr	r1, [pc, #436]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	4968      	ldr	r1, [pc, #416]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
 80049c6:	e025      	b.n	8004a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c8:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a65      	ldr	r2, [pc, #404]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049ce:	f043 0308 	orr.w	r3, r3, #8
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b63      	ldr	r3, [pc, #396]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4960      	ldr	r1, [pc, #384]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	495b      	ldr	r1, [pc, #364]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fd15 	bl	8005434 <RCC_SetFlashLatencyFromMSIRange>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e343      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a14:	f000 fc4a 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b52      	ldr	r3, [pc, #328]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	4950      	ldr	r1, [pc, #320]	@ (8004b68 <HAL_RCC_OscConfig+0x274>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	4a4e      	ldr	r2, [pc, #312]	@ (8004b6c <HAL_RCC_OscConfig+0x278>)
 8004a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a34:	4b4e      	ldr	r3, [pc, #312]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd fa85 	bl	8001f48 <HAL_InitTick>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d052      	beq.n	8004aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	e327      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d032      	beq.n	8004aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a54:	4b43      	ldr	r3, [pc, #268]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a42      	ldr	r2, [pc, #264]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a60:	f7fd fac2 	bl	8001fe8 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a68:	f7fd fabe 	bl	8001fe8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e310      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a86:	4b37      	ldr	r3, [pc, #220]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a36      	ldr	r2, [pc, #216]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a8c:	f043 0308 	orr.w	r3, r3, #8
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b34      	ldr	r3, [pc, #208]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	4931      	ldr	r1, [pc, #196]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	492c      	ldr	r1, [pc, #176]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	e01a      	b.n	8004af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004aba:	4b2a      	ldr	r3, [pc, #168]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a29      	ldr	r2, [pc, #164]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ac6:	f7fd fa8f 	bl	8001fe8 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ace:	f7fd fa8b 	bl	8001fe8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e2dd      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ae0:	4b20      	ldr	r3, [pc, #128]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x1da>
 8004aec:	e000      	b.n	8004af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d074      	beq.n	8004be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d005      	beq.n	8004b0e <HAL_RCC_OscConfig+0x21a>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d10e      	bne.n	8004b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0e:	4b15      	ldr	r3, [pc, #84]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d064      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2f0>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d160      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e2ba      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x24a>
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0b      	ldr	r2, [pc, #44]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e026      	b.n	8004b8c <HAL_RCC_OscConfig+0x298>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b46:	d115      	bne.n	8004b74 <HAL_RCC_OscConfig+0x280>
 8004b48:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a05      	ldr	r2, [pc, #20]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a02      	ldr	r2, [pc, #8]	@ (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e014      	b.n	8004b8c <HAL_RCC_OscConfig+0x298>
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	08008928 	.word	0x08008928
 8004b6c:	20000018 	.word	0x20000018
 8004b70:	2000001c 	.word	0x2000001c
 8004b74:	4ba0      	ldr	r3, [pc, #640]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a9f      	ldr	r2, [pc, #636]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b9d      	ldr	r3, [pc, #628]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a9c      	ldr	r2, [pc, #624]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d013      	beq.n	8004bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd fa28 	bl	8001fe8 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fd fa24 	bl	8001fe8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	@ 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e276      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bae:	4b92      	ldr	r3, [pc, #584]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x2a8>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fa14 	bl	8001fe8 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fd fa10 	bl	8001fe8 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	@ 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e262      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd6:	4b88      	ldr	r3, [pc, #544]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2d0>
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d060      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_OscConfig+0x310>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d119      	bne.n	8004c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d116      	bne.n	8004c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c04:	4b7c      	ldr	r3, [pc, #496]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_OscConfig+0x328>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e23f      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	4b76      	ldr	r3, [pc, #472]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	061b      	lsls	r3, r3, #24
 8004c2a:	4973      	ldr	r1, [pc, #460]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c30:	e040      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d023      	beq.n	8004c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fd f9cf 	bl	8001fe8 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fd f9cb 	bl	8001fe8 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e21d      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c60:	4b65      	ldr	r3, [pc, #404]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b62      	ldr	r3, [pc, #392]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	495f      	ldr	r1, [pc, #380]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	e018      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b5d      	ldr	r3, [pc, #372]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5c      	ldr	r2, [pc, #368]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fd f9ab 	bl	8001fe8 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c96:	f7fd f9a7 	bl	8001fe8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e1f9      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca8:	4b53      	ldr	r3, [pc, #332]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d03c      	beq.n	8004d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cce:	4a4a      	ldr	r2, [pc, #296]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd f986 	bl	8001fe8 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fd f982 	bl	8001fe8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1d4      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf2:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ef      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x3ec>
 8004d00:	e01b      	b.n	8004d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d02:	4b3d      	ldr	r3, [pc, #244]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d08:	4a3b      	ldr	r2, [pc, #236]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fd f969 	bl	8001fe8 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fd f965 	bl	8001fe8 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1b7      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d2c:	4b32      	ldr	r3, [pc, #200]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ef      	bne.n	8004d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80a6 	beq.w	8004e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10d      	bne.n	8004d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d58:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	4a26      	ldr	r2, [pc, #152]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d64:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d74:	4b21      	ldr	r3, [pc, #132]	@ (8004dfc <HAL_RCC_OscConfig+0x508>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d118      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d80:	4b1e      	ldr	r3, [pc, #120]	@ (8004dfc <HAL_RCC_OscConfig+0x508>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <HAL_RCC_OscConfig+0x508>)
 8004d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8c:	f7fd f92c 	bl	8001fe8 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d94:	f7fd f928 	bl	8001fe8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e17a      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <HAL_RCC_OscConfig+0x508>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d108      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4d8>
 8004dba:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dca:	e029      	b.n	8004e20 <HAL_RCC_OscConfig+0x52c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d115      	bne.n	8004e00 <HAL_RCC_OscConfig+0x50c>
 8004dd4:	4b08      	ldr	r3, [pc, #32]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dda:	4a07      	ldr	r2, [pc, #28]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dea:	4a03      	ldr	r2, [pc, #12]	@ (8004df8 <HAL_RCC_OscConfig+0x504>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004df4:	e014      	b.n	8004e20 <HAL_RCC_OscConfig+0x52c>
 8004df6:	bf00      	nop
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40007000 	.word	0x40007000
 8004e00:	4b9c      	ldr	r3, [pc, #624]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	4a9b      	ldr	r2, [pc, #620]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e10:	4b98      	ldr	r3, [pc, #608]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	4a97      	ldr	r2, [pc, #604]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d016      	beq.n	8004e56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fd f8de 	bl	8001fe8 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e30:	f7fd f8da 	bl	8001fe8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e12a      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e46:	4b8b      	ldr	r3, [pc, #556]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ed      	beq.n	8004e30 <HAL_RCC_OscConfig+0x53c>
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fd f8c7 	bl	8001fe8 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fd f8c3 	bl	8001fe8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e113      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e74:	4b7f      	ldr	r3, [pc, #508]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ed      	bne.n	8004e5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e82:	7ffb      	ldrb	r3, [r7, #31]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b7a      	ldr	r3, [pc, #488]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8c:	4a79      	ldr	r2, [pc, #484]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80fe 	beq.w	800509a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	f040 80d0 	bne.w	8005048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ea8:	4b72      	ldr	r3, [pc, #456]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0203 	and.w	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d130      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d127      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11f      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ee8:	2a07      	cmp	r2, #7
 8004eea:	bf14      	ite	ne
 8004eec:	2201      	movne	r2, #1
 8004eee:	2200      	moveq	r2, #0
 8004ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d113      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d109      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	3b01      	subs	r3, #1
 8004f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d06e      	beq.n	8004ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d069      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f24:	4b53      	ldr	r3, [pc, #332]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f30:	4b50      	ldr	r3, [pc, #320]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0ad      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f40:	4b4c      	ldr	r3, [pc, #304]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a4b      	ldr	r2, [pc, #300]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f4c:	f7fd f84c 	bl	8001fe8 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fd f848 	bl	8001fe8 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e09a      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f66:	4b43      	ldr	r3, [pc, #268]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f72:	4b40      	ldr	r3, [pc, #256]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	4b40      	ldr	r3, [pc, #256]	@ (8005078 <HAL_RCC_OscConfig+0x784>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f82:	3a01      	subs	r2, #1
 8004f84:	0112      	lsls	r2, r2, #4
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f8c:	0212      	lsls	r2, r2, #8
 8004f8e:	4311      	orrs	r1, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f94:	0852      	lsrs	r2, r2, #1
 8004f96:	3a01      	subs	r2, #1
 8004f98:	0552      	lsls	r2, r2, #21
 8004f9a:	4311      	orrs	r1, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004fa0:	0852      	lsrs	r2, r2, #1
 8004fa2:	3a01      	subs	r2, #1
 8004fa4:	0652      	lsls	r2, r2, #25
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fac:	0912      	lsrs	r2, r2, #4
 8004fae:	0452      	lsls	r2, r2, #17
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	4930      	ldr	r1, [pc, #192]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd0:	f7fd f80a 	bl	8001fe8 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd f806 	bl	8001fe8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e058      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	4b22      	ldr	r3, [pc, #136]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff6:	e050      	b.n	800509a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e04f      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d148      	bne.n	800509a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005008:	4b1a      	ldr	r3, [pc, #104]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a19      	ldr	r2, [pc, #100]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 800500e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005014:	4b17      	ldr	r3, [pc, #92]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a16      	ldr	r2, [pc, #88]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 800501a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800501e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005020:	f7fc ffe2 	bl	8001fe8 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fc ffde 	bl	8001fe8 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e030      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x734>
 8005046:	e028      	b.n	800509a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d023      	beq.n	8005096 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <HAL_RCC_OscConfig+0x780>)
 8005054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fc ffc5 	bl	8001fe8 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005060:	e00c      	b.n	800507c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005062:	f7fc ffc1 	bl	8001fe8 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d905      	bls.n	800507c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e013      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
 8005074:	40021000 	.word	0x40021000
 8005078:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507c:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <HAL_RCC_OscConfig+0x7b0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ec      	bne.n	8005062 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <HAL_RCC_OscConfig+0x7b0>)
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	4905      	ldr	r1, [pc, #20]	@ (80050a4 <HAL_RCC_OscConfig+0x7b0>)
 800508e:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <HAL_RCC_OscConfig+0x7b4>)
 8005090:	4013      	ands	r3, r2
 8005092:	60cb      	str	r3, [r1, #12]
 8005094:	e001      	b.n	800509a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	feeefffc 	.word	0xfeeefffc

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0e7      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b75      	ldr	r3, [pc, #468]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d910      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b72      	ldr	r3, [pc, #456]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 0207 	bic.w	r2, r3, #7
 80050d6:	4970      	ldr	r1, [pc, #448]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b6e      	ldr	r3, [pc, #440]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0cf      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d010      	beq.n	800511e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b66      	ldr	r3, [pc, #408]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005108:	429a      	cmp	r2, r3
 800510a:	d908      	bls.n	800511e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	4b63      	ldr	r3, [pc, #396]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4960      	ldr	r1, [pc, #384]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d04c      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005132:	4b5a      	ldr	r3, [pc, #360]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d121      	bne.n	8005182 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0a6      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800514a:	4b54      	ldr	r3, [pc, #336]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d115      	bne.n	8005182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e09a      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005162:	4b4e      	ldr	r3, [pc, #312]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e08e      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005172:	4b4a      	ldr	r3, [pc, #296]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e086      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005182:	4b46      	ldr	r3, [pc, #280]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f023 0203 	bic.w	r2, r3, #3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4943      	ldr	r1, [pc, #268]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005194:	f7fc ff28 	bl	8001fe8 <HAL_GetTick>
 8005198:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519c:	f7fc ff24 	bl	8001fe8 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e06e      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b2:	4b3a      	ldr	r3, [pc, #232]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 020c 	and.w	r2, r3, #12
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d1eb      	bne.n	800519c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	4b31      	ldr	r3, [pc, #196]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051dc:	429a      	cmp	r2, r3
 80051de:	d208      	bcs.n	80051f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e0:	4b2e      	ldr	r3, [pc, #184]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	492b      	ldr	r1, [pc, #172]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051f2:	4b29      	ldr	r3, [pc, #164]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d210      	bcs.n	8005222 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005200:	4b25      	ldr	r3, [pc, #148]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f023 0207 	bic.w	r2, r3, #7
 8005208:	4923      	ldr	r1, [pc, #140]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	4313      	orrs	r3, r2
 800520e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005210:	4b21      	ldr	r3, [pc, #132]	@ (8005298 <HAL_RCC_ClockConfig+0x1ec>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d001      	beq.n	8005222 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e036      	b.n	8005290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800522e:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4918      	ldr	r1, [pc, #96]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800523c:	4313      	orrs	r3, r2
 800523e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d009      	beq.n	8005260 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524c:	4b13      	ldr	r3, [pc, #76]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4910      	ldr	r1, [pc, #64]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005260:	f000 f824 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <HAL_RCC_ClockConfig+0x1f0>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	490b      	ldr	r1, [pc, #44]	@ (80052a0 <HAL_RCC_ClockConfig+0x1f4>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
 800527c:	4a09      	ldr	r2, [pc, #36]	@ (80052a4 <HAL_RCC_ClockConfig+0x1f8>)
 800527e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005280:	4b09      	ldr	r3, [pc, #36]	@ (80052a8 <HAL_RCC_ClockConfig+0x1fc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fc fe5f 	bl	8001f48 <HAL_InitTick>
 800528a:	4603      	mov	r3, r0
 800528c:	72fb      	strb	r3, [r7, #11]

  return status;
 800528e:	7afb      	ldrb	r3, [r7, #11]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40022000 	.word	0x40022000
 800529c:	40021000 	.word	0x40021000
 80052a0:	08008928 	.word	0x08008928
 80052a4:	20000018 	.word	0x20000018
 80052a8:	2000001c 	.word	0x2000001c

080052ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b089      	sub	sp, #36	@ 0x24
 80052b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ba:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c4:	4b3b      	ldr	r3, [pc, #236]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0x34>
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0c      	cmp	r3, #12
 80052d8:	d121      	bne.n	800531e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d11e      	bne.n	800531e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052e0:	4b34      	ldr	r3, [pc, #208]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052ec:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f2:	0a1b      	lsrs	r3, r3, #8
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	e005      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052fc:	4b2d      	ldr	r3, [pc, #180]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005308:	4a2b      	ldr	r2, [pc, #172]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005310:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10d      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800531c:	e00a      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d102      	bne.n	800532a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005324:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e004      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d101      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005330:	4b23      	ldr	r3, [pc, #140]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d134      	bne.n	80053a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800533a:	4b1e      	ldr	r3, [pc, #120]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d003      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0xa6>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d003      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0xac>
 8005350:	e005      	b.n	800535e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005352:	4b1a      	ldr	r3, [pc, #104]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005354:	617b      	str	r3, [r7, #20]
      break;
 8005356:	e005      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005358:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800535a:	617b      	str	r3, [r7, #20]
      break;
 800535c:	e002      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	617b      	str	r3, [r7, #20]
      break;
 8005362:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005364:	4b13      	ldr	r3, [pc, #76]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	3301      	adds	r3, #1
 8005370:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005372:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	fb03 f202 	mul.w	r2, r3, r2
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800538a:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	0e5b      	lsrs	r3, r3, #25
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	3301      	adds	r3, #1
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053a4:	69bb      	ldr	r3, [r7, #24]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3724      	adds	r7, #36	@ 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000
 80053b8:	08008940 	.word	0x08008940
 80053bc:	00f42400 	.word	0x00f42400
 80053c0:	007a1200 	.word	0x007a1200

080053c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c8:	4b03      	ldr	r3, [pc, #12]	@ (80053d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ca:	681b      	ldr	r3, [r3, #0]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000018 	.word	0x20000018

080053dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053e0:	f7ff fff0 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 80053e4:	4602      	mov	r2, r0
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	4904      	ldr	r1, [pc, #16]	@ (8005404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053f2:	5ccb      	ldrb	r3, [r1, r3]
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000
 8005404:	08008938 	.word	0x08008938

08005408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800540c:	f7ff ffda 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b06      	ldr	r3, [pc, #24]	@ (800542c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0adb      	lsrs	r3, r3, #11
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4904      	ldr	r1, [pc, #16]	@ (8005430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	08008938 	.word	0x08008938

08005434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005440:	4b2a      	ldr	r3, [pc, #168]	@ (80054ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800544c:	f7ff f9ee 	bl	800482c <HAL_PWREx_GetVoltageRange>
 8005450:	6178      	str	r0, [r7, #20]
 8005452:	e014      	b.n	800547e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005454:	4b25      	ldr	r3, [pc, #148]	@ (80054ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005458:	4a24      	ldr	r2, [pc, #144]	@ (80054ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800545a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800545e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005460:	4b22      	ldr	r3, [pc, #136]	@ (80054ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800546c:	f7ff f9de 	bl	800482c <HAL_PWREx_GetVoltageRange>
 8005470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005472:	4b1e      	ldr	r3, [pc, #120]	@ (80054ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005476:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800547c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005484:	d10b      	bne.n	800549e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b80      	cmp	r3, #128	@ 0x80
 800548a:	d919      	bls.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005490:	d902      	bls.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005492:	2302      	movs	r3, #2
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	e013      	b.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005498:	2301      	movs	r3, #1
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e010      	b.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b80      	cmp	r3, #128	@ 0x80
 80054a2:	d902      	bls.n	80054aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054a4:	2303      	movs	r3, #3
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e00a      	b.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b80      	cmp	r3, #128	@ 0x80
 80054ae:	d102      	bne.n	80054b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054b0:	2302      	movs	r3, #2
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	e004      	b.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b70      	cmp	r3, #112	@ 0x70
 80054ba:	d101      	bne.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054bc:	2301      	movs	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f023 0207 	bic.w	r2, r3, #7
 80054c8:	4909      	ldr	r1, [pc, #36]	@ (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054d0:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d001      	beq.n	80054e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40022000 	.word	0x40022000

080054f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054fc:	2300      	movs	r3, #0
 80054fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005500:	2300      	movs	r3, #0
 8005502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800550c:	2b00      	cmp	r3, #0
 800550e:	d041      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005518:	d02a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800551a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800551e:	d824      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005524:	d008      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800552a:	d81e      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005534:	d010      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005536:	e018      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005538:	4b86      	ldr	r3, [pc, #536]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a85      	ldr	r2, [pc, #532]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005542:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005544:	e015      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3304      	adds	r3, #4
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fabb 	bl	8005ac8 <RCCEx_PLLSAI1_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005556:	e00c      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3320      	adds	r3, #32
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fba6 	bl	8005cb0 <RCCEx_PLLSAI2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005568:	e003      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	74fb      	strb	r3, [r7, #19]
      break;
 800556e:	e000      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10b      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005578:	4b76      	ldr	r3, [pc, #472]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005586:	4973      	ldr	r1, [pc, #460]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800558e:	e001      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d041      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055a8:	d02a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80055aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055ae:	d824      	bhi.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055b4:	d008      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055ba:	d81e      	bhi.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80055c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055c4:	d010      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055c6:	e018      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055c8:	4b62      	ldr	r3, [pc, #392]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a61      	ldr	r2, [pc, #388]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055d4:	e015      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fa73 	bl	8005ac8 <RCCEx_PLLSAI1_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055e6:	e00c      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3320      	adds	r3, #32
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fb5e 	bl	8005cb0 <RCCEx_PLLSAI2_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055f8:	e003      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	74fb      	strb	r3, [r7, #19]
      break;
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005608:	4b52      	ldr	r3, [pc, #328]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005616:	494f      	ldr	r1, [pc, #316]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800561e:	e001      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80a0 	beq.w	8005772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005632:	2300      	movs	r3, #0
 8005634:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005636:	4b47      	ldr	r3, [pc, #284]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00d      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	4b41      	ldr	r3, [pc, #260]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005650:	4a40      	ldr	r2, [pc, #256]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005656:	6593      	str	r3, [r2, #88]	@ 0x58
 8005658:	4b3e      	ldr	r3, [pc, #248]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005664:	2301      	movs	r3, #1
 8005666:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005668:	4b3b      	ldr	r3, [pc, #236]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3a      	ldr	r2, [pc, #232]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800566e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005674:	f7fc fcb8 	bl	8001fe8 <HAL_GetTick>
 8005678:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800567a:	e009      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567c:	f7fc fcb4 	bl	8001fe8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d902      	bls.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	74fb      	strb	r3, [r7, #19]
        break;
 800568e:	e005      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005690:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ef      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800569c:	7cfb      	ldrb	r3, [r7, #19]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d15c      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01f      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d019      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056c0:	4b24      	ldr	r3, [pc, #144]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056cc:	4b21      	ldr	r3, [pc, #132]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d2:	4a20      	ldr	r2, [pc, #128]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056ec:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fc fc73 	bl	8001fe8 <HAL_GetTick>
 8005702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005704:	e00b      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fc fc6f 	bl	8001fe8 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d902      	bls.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	74fb      	strb	r3, [r7, #19]
            break;
 800571c:	e006      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571e:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ec      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10c      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005732:	4b08      	ldr	r3, [pc, #32]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005742:	4904      	ldr	r1, [pc, #16]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800574a:	e009      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800574c:	7cfb      	ldrb	r3, [r7, #19]
 800574e:	74bb      	strb	r3, [r7, #18]
 8005750:	e006      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005760:	7c7b      	ldrb	r3, [r7, #17]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d105      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005766:	4b9e      	ldr	r3, [pc, #632]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	4a9d      	ldr	r2, [pc, #628]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800577e:	4b98      	ldr	r3, [pc, #608]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f023 0203 	bic.w	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	4994      	ldr	r1, [pc, #592]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057a0:	4b8f      	ldr	r3, [pc, #572]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f023 020c 	bic.w	r2, r3, #12
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	498c      	ldr	r1, [pc, #560]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057c2:	4b87      	ldr	r3, [pc, #540]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	4983      	ldr	r1, [pc, #524]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057e4:	4b7e      	ldr	r3, [pc, #504]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f2:	497b      	ldr	r1, [pc, #492]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005806:	4b76      	ldr	r3, [pc, #472]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005814:	4972      	ldr	r1, [pc, #456]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005828:	4b6d      	ldr	r3, [pc, #436]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005836:	496a      	ldr	r1, [pc, #424]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800584a:	4b65      	ldr	r3, [pc, #404]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	4961      	ldr	r1, [pc, #388]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800586c:	4b5c      	ldr	r3, [pc, #368]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800587a:	4959      	ldr	r1, [pc, #356]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800588e:	4b54      	ldr	r3, [pc, #336]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589c:	4950      	ldr	r1, [pc, #320]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058b0:	4b4b      	ldr	r3, [pc, #300]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	4948      	ldr	r1, [pc, #288]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058d2:	4b43      	ldr	r3, [pc, #268]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e0:	493f      	ldr	r1, [pc, #252]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d028      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058f4:	4b3a      	ldr	r3, [pc, #232]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005902:	4937      	ldr	r1, [pc, #220]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005912:	d106      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005914:	4b32      	ldr	r3, [pc, #200]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4a31      	ldr	r2, [pc, #196]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800591e:	60d3      	str	r3, [r2, #12]
 8005920:	e011      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800592a:	d10c      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f8c8 	bl	8005ac8 <RCCEx_PLLSAI1_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800593c:	7cfb      	ldrb	r3, [r7, #19]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005942:	7cfb      	ldrb	r3, [r7, #19]
 8005944:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d028      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005952:	4b23      	ldr	r3, [pc, #140]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005958:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005960:	491f      	ldr	r1, [pc, #124]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005970:	d106      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005972:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	4a1a      	ldr	r2, [pc, #104]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005978:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800597c:	60d3      	str	r3, [r2, #12]
 800597e:	e011      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005984:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005988:	d10c      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3304      	adds	r3, #4
 800598e:	2101      	movs	r1, #1
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f899 	bl	8005ac8 <RCCEx_PLLSAI1_Config>
 8005996:	4603      	mov	r3, r0
 8005998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d02b      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059b0:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059be:	4908      	ldr	r1, [pc, #32]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059ce:	d109      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a02      	ldr	r2, [pc, #8]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059da:	60d3      	str	r3, [r2, #12]
 80059dc:	e014      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059ec:	d10c      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2101      	movs	r1, #1
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 f867 	bl	8005ac8 <RCCEx_PLLSAI1_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059fe:	7cfb      	ldrb	r3, [r7, #19]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d02f      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a14:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a22:	4928      	ldr	r1, [pc, #160]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a32:	d10d      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f844 	bl	8005ac8 <RCCEx_PLLSAI1_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d014      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a4a:	7cfb      	ldrb	r3, [r7, #19]
 8005a4c:	74bb      	strb	r3, [r7, #18]
 8005a4e:	e011      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3320      	adds	r3, #32
 8005a5e:	2102      	movs	r1, #2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f925 	bl	8005cb0 <RCCEx_PLLSAI2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a6a:	7cfb      	ldrb	r3, [r7, #19]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a80:	4b10      	ldr	r3, [pc, #64]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a8e:	490d      	ldr	r1, [pc, #52]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005aa2:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab2:	4904      	ldr	r1, [pc, #16]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005aba:	7cbb      	ldrb	r3, [r7, #18]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000

08005ac8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ad6:	4b75      	ldr	r3, [pc, #468]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d018      	beq.n	8005b14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ae2:	4b72      	ldr	r3, [pc, #456]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0203 	and.w	r2, r3, #3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d10d      	bne.n	8005b0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
       ||
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005afa:	4b6c      	ldr	r3, [pc, #432]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
       ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d047      	beq.n	8005b9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
 8005b12:	e044      	b.n	8005b9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d018      	beq.n	8005b4e <RCCEx_PLLSAI1_Config+0x86>
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d825      	bhi.n	8005b6c <RCCEx_PLLSAI1_Config+0xa4>
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d002      	beq.n	8005b2a <RCCEx_PLLSAI1_Config+0x62>
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d009      	beq.n	8005b3c <RCCEx_PLLSAI1_Config+0x74>
 8005b28:	e020      	b.n	8005b6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b2a:	4b60      	ldr	r3, [pc, #384]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11d      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b3a:	e01a      	b.n	8005b72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d116      	bne.n	8005b76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b4c:	e013      	b.n	8005b76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b4e:	4b57      	ldr	r3, [pc, #348]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10f      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b5a:	4b54      	ldr	r3, [pc, #336]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b6a:	e006      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b70:	e004      	b.n	8005b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b82:	4b4a      	ldr	r3, [pc, #296]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	430b      	orrs	r3, r1
 8005b98:	4944      	ldr	r1, [pc, #272]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d17d      	bne.n	8005ca0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ba4:	4b41      	ldr	r3, [pc, #260]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a40      	ldr	r2, [pc, #256]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005baa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb0:	f7fc fa1a 	bl	8001fe8 <HAL_GetTick>
 8005bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bb6:	e009      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb8:	f7fc fa16 	bl	8001fe8 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d902      	bls.n	8005bcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bca:	e005      	b.n	8005bd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bcc:	4b37      	ldr	r3, [pc, #220]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1ef      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d160      	bne.n	8005ca0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d111      	bne.n	8005c08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be4:	4b31      	ldr	r3, [pc, #196]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6892      	ldr	r2, [r2, #8]
 8005bf4:	0211      	lsls	r1, r2, #8
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68d2      	ldr	r2, [r2, #12]
 8005bfa:	0912      	lsrs	r2, r2, #4
 8005bfc:	0452      	lsls	r2, r2, #17
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	492a      	ldr	r1, [pc, #168]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]
 8005c06:	e027      	b.n	8005c58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d112      	bne.n	8005c34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c0e:	4b27      	ldr	r3, [pc, #156]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6892      	ldr	r2, [r2, #8]
 8005c1e:	0211      	lsls	r1, r2, #8
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6912      	ldr	r2, [r2, #16]
 8005c24:	0852      	lsrs	r2, r2, #1
 8005c26:	3a01      	subs	r2, #1
 8005c28:	0552      	lsls	r2, r2, #21
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	491f      	ldr	r1, [pc, #124]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]
 8005c32:	e011      	b.n	8005c58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c34:	4b1d      	ldr	r3, [pc, #116]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6892      	ldr	r2, [r2, #8]
 8005c44:	0211      	lsls	r1, r2, #8
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6952      	ldr	r2, [r2, #20]
 8005c4a:	0852      	lsrs	r2, r2, #1
 8005c4c:	3a01      	subs	r2, #1
 8005c4e:	0652      	lsls	r2, r2, #25
 8005c50:	430a      	orrs	r2, r1
 8005c52:	4916      	ldr	r1, [pc, #88]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c58:	4b14      	ldr	r3, [pc, #80]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c64:	f7fc f9c0 	bl	8001fe8 <HAL_GetTick>
 8005c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c6a:	e009      	b.n	8005c80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c6c:	f7fc f9bc 	bl	8001fe8 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d902      	bls.n	8005c80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8005c7e:	e005      	b.n	8005c8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c80:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0ef      	beq.n	8005c6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	4904      	ldr	r1, [pc, #16]	@ (8005cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40021000 	.word	0x40021000

08005cb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0203 	and.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d10d      	bne.n	8005cf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ce2:	4b61      	ldr	r3, [pc, #388]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d047      	beq.n	8005d86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	73fb      	strb	r3, [r7, #15]
 8005cfa:	e044      	b.n	8005d86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d018      	beq.n	8005d36 <RCCEx_PLLSAI2_Config+0x86>
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d825      	bhi.n	8005d54 <RCCEx_PLLSAI2_Config+0xa4>
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d002      	beq.n	8005d12 <RCCEx_PLLSAI2_Config+0x62>
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d009      	beq.n	8005d24 <RCCEx_PLLSAI2_Config+0x74>
 8005d10:	e020      	b.n	8005d54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d12:	4b55      	ldr	r3, [pc, #340]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11d      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d22:	e01a      	b.n	8005d5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d24:	4b50      	ldr	r3, [pc, #320]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d34:	e013      	b.n	8005d5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d36:	4b4c      	ldr	r3, [pc, #304]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10f      	bne.n	8005d62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d42:	4b49      	ldr	r3, [pc, #292]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d52:	e006      	b.n	8005d62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
      break;
 8005d58:	e004      	b.n	8005d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e002      	b.n	8005d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e000      	b.n	8005d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10d      	bne.n	8005d86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6819      	ldr	r1, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	4939      	ldr	r1, [pc, #228]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d167      	bne.n	8005e5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d8c:	4b36      	ldr	r3, [pc, #216]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a35      	ldr	r2, [pc, #212]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d98:	f7fc f926 	bl	8001fe8 <HAL_GetTick>
 8005d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d9e:	e009      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005da0:	f7fc f922 	bl	8001fe8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d902      	bls.n	8005db4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	73fb      	strb	r3, [r7, #15]
        break;
 8005db2:	e005      	b.n	8005dc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005db4:	4b2c      	ldr	r3, [pc, #176]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1ef      	bne.n	8005da0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d14a      	bne.n	8005e5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d111      	bne.n	8005df0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dcc:	4b26      	ldr	r3, [pc, #152]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6892      	ldr	r2, [r2, #8]
 8005ddc:	0211      	lsls	r1, r2, #8
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68d2      	ldr	r2, [r2, #12]
 8005de2:	0912      	lsrs	r2, r2, #4
 8005de4:	0452      	lsls	r2, r2, #17
 8005de6:	430a      	orrs	r2, r1
 8005de8:	491f      	ldr	r1, [pc, #124]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	614b      	str	r3, [r1, #20]
 8005dee:	e011      	b.n	8005e14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005df0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005df8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6892      	ldr	r2, [r2, #8]
 8005e00:	0211      	lsls	r1, r2, #8
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6912      	ldr	r2, [r2, #16]
 8005e06:	0852      	lsrs	r2, r2, #1
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	0652      	lsls	r2, r2, #25
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	4916      	ldr	r1, [pc, #88]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e14:	4b14      	ldr	r3, [pc, #80]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a13      	ldr	r2, [pc, #76]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e20:	f7fc f8e2 	bl	8001fe8 <HAL_GetTick>
 8005e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e26:	e009      	b.n	8005e3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e28:	f7fc f8de 	bl	8001fe8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d902      	bls.n	8005e3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	73fb      	strb	r3, [r7, #15]
          break;
 8005e3a:	e005      	b.n	8005e48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0ef      	beq.n	8005e28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e4e:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	4904      	ldr	r1, [pc, #16]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000

08005e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e049      	b.n	8005f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fb fe4a 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f000 fdde 	bl	8006a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_TIM_Base_Stop+0x38>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d107      	bne.n	8005f52 <HAL_TIM_Base_Stop+0x38>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e04f      	b.n	8006020 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	@ (800602c <HAL_TIM_Base_Start_IT+0xc4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005faa:	d018      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8006030 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1e      	ldr	r2, [pc, #120]	@ (8006034 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006038 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	@ (800603c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a19      	ldr	r2, [pc, #100]	@ (8006040 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d115      	bne.n	800600a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	4b17      	ldr	r3, [pc, #92]	@ (8006044 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d015      	beq.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff6:	d011      	beq.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006008:	e008      	b.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e000      	b.n	800601e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40013400 	.word	0x40013400
 8006040:	40014000 	.word	0x40014000
 8006044:	00010007 	.word	0x00010007

08006048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e049      	b.n	80060ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fb fcc4 	bl	80019fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f000 fcf0 	bl	8006a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_TIM_PWM_Start+0x24>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e03c      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b04      	cmp	r3, #4
 8006120:	d109      	bne.n	8006136 <HAL_TIM_PWM_Start+0x3e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	bf14      	ite	ne
 800612e:	2301      	movne	r3, #1
 8006130:	2300      	moveq	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	e02f      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d109      	bne.n	8006150 <HAL_TIM_PWM_Start+0x58>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	bf14      	ite	ne
 8006148:	2301      	movne	r3, #1
 800614a:	2300      	moveq	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e022      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b0c      	cmp	r3, #12
 8006154:	d109      	bne.n	800616a <HAL_TIM_PWM_Start+0x72>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	e015      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b10      	cmp	r3, #16
 800616e:	d109      	bne.n	8006184 <HAL_TIM_PWM_Start+0x8c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e008      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e09c      	b.n	80062d8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_PWM_Start+0xb6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ac:	e023      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d104      	bne.n	80061be <HAL_TIM_PWM_Start+0xc6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061bc:	e01b      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_PWM_Start+0xd6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061cc:	e013      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Start+0xe6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061dc:	e00b      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0xf6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ec:	e003      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 f84a 	bl	8007298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a35      	ldr	r2, [pc, #212]	@ (80062e0 <HAL_TIM_PWM_Start+0x1e8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <HAL_TIM_PWM_Start+0x13e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a34      	ldr	r2, [pc, #208]	@ (80062e4 <HAL_TIM_PWM_Start+0x1ec>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_TIM_PWM_Start+0x13e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a32      	ldr	r2, [pc, #200]	@ (80062e8 <HAL_TIM_PWM_Start+0x1f0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_TIM_PWM_Start+0x13e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a31      	ldr	r2, [pc, #196]	@ (80062ec <HAL_TIM_PWM_Start+0x1f4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIM_PWM_Start+0x13e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a2f      	ldr	r2, [pc, #188]	@ (80062f0 <HAL_TIM_PWM_Start+0x1f8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d101      	bne.n	800623a <HAL_TIM_PWM_Start+0x142>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <HAL_TIM_PWM_Start+0x144>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800624e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a22      	ldr	r2, [pc, #136]	@ (80062e0 <HAL_TIM_PWM_Start+0x1e8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_TIM_PWM_Start+0x19e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006262:	d018      	beq.n	8006296 <HAL_TIM_PWM_Start+0x19e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a22      	ldr	r2, [pc, #136]	@ (80062f4 <HAL_TIM_PWM_Start+0x1fc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_TIM_PWM_Start+0x19e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a21      	ldr	r2, [pc, #132]	@ (80062f8 <HAL_TIM_PWM_Start+0x200>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_TIM_PWM_Start+0x19e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1f      	ldr	r2, [pc, #124]	@ (80062fc <HAL_TIM_PWM_Start+0x204>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_TIM_PWM_Start+0x19e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a17      	ldr	r2, [pc, #92]	@ (80062e4 <HAL_TIM_PWM_Start+0x1ec>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIM_PWM_Start+0x19e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a15      	ldr	r2, [pc, #84]	@ (80062e8 <HAL_TIM_PWM_Start+0x1f0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d115      	bne.n	80062c2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	4b18      	ldr	r3, [pc, #96]	@ (8006300 <HAL_TIM_PWM_Start+0x208>)
 800629e:	4013      	ands	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	d015      	beq.n	80062d4 <HAL_TIM_PWM_Start+0x1dc>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ae:	d011      	beq.n	80062d4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	e008      	b.n	80062d4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e000      	b.n	80062d6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40012c00 	.word	0x40012c00
 80062e4:	40013400 	.word	0x40013400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40014400 	.word	0x40014400
 80062f0:	40014800 	.word	0x40014800
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40000c00 	.word	0x40000c00
 8006300:	00010007 	.word	0x00010007

08006304 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e097      	b.n	8006448 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fb fb89 	bl	8001a44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006348:	f023 0307 	bic.w	r3, r3, #7
 800634c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f000 fb87 	bl	8006a6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	4313      	orrs	r3, r2
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80063a4:	f023 030c 	bic.w	r3, r3, #12
 80063a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	4313      	orrs	r3, r2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	011a      	lsls	r2, r3, #4
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	031b      	lsls	r3, r3, #12
 80063d4:	4313      	orrs	r3, r2
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	4313      	orrs	r3, r2
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d020      	beq.n	80064b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01b      	beq.n	80064b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0202 	mvn.w	r2, #2
 8006484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fac7 	bl	8006a2e <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fab9 	bl	8006a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 faca 	bl	8006a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d020      	beq.n	8006500 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0204 	mvn.w	r2, #4
 80064d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 faa1 	bl	8006a2e <HAL_TIM_IC_CaptureCallback>
 80064ec:	e005      	b.n	80064fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa93 	bl	8006a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 faa4 	bl	8006a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d020      	beq.n	800654c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01b      	beq.n	800654c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0208 	mvn.w	r2, #8
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2204      	movs	r2, #4
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa7b 	bl	8006a2e <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa6d 	bl	8006a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa7e 	bl	8006a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	d020      	beq.n	8006598 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01b      	beq.n	8006598 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0210 	mvn.w	r2, #16
 8006568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2208      	movs	r2, #8
 800656e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa55 	bl	8006a2e <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa47 	bl	8006a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa58 	bl	8006a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00c      	beq.n	80065bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0201 	mvn.w	r2, #1
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb f92c 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00c      	beq.n	80065ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 ff0f 	bl	8007408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 ff07 	bl	800741c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00c      	beq.n	8006632 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800662a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa12 	bl	8006a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00c      	beq.n	8006656 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f06f 0220 	mvn.w	r2, #32
 800664e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fecf 	bl	80073f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800667a:	2302      	movs	r3, #2
 800667c:	e0ff      	b.n	800687e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b14      	cmp	r3, #20
 800668a:	f200 80f0 	bhi.w	800686e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066e9 	.word	0x080066e9
 8006698:	0800686f 	.word	0x0800686f
 800669c:	0800686f 	.word	0x0800686f
 80066a0:	0800686f 	.word	0x0800686f
 80066a4:	08006729 	.word	0x08006729
 80066a8:	0800686f 	.word	0x0800686f
 80066ac:	0800686f 	.word	0x0800686f
 80066b0:	0800686f 	.word	0x0800686f
 80066b4:	0800676b 	.word	0x0800676b
 80066b8:	0800686f 	.word	0x0800686f
 80066bc:	0800686f 	.word	0x0800686f
 80066c0:	0800686f 	.word	0x0800686f
 80066c4:	080067ab 	.word	0x080067ab
 80066c8:	0800686f 	.word	0x0800686f
 80066cc:	0800686f 	.word	0x0800686f
 80066d0:	0800686f 	.word	0x0800686f
 80066d4:	080067ed 	.word	0x080067ed
 80066d8:	0800686f 	.word	0x0800686f
 80066dc:	0800686f 	.word	0x0800686f
 80066e0:	0800686f 	.word	0x0800686f
 80066e4:	0800682d 	.word	0x0800682d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fa62 	bl	8006bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0208 	orr.w	r2, r2, #8
 8006702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0204 	bic.w	r2, r2, #4
 8006712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6999      	ldr	r1, [r3, #24]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	619a      	str	r2, [r3, #24]
      break;
 8006726:	e0a5      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fad2 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6999      	ldr	r1, [r3, #24]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	021a      	lsls	r2, r3, #8
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	619a      	str	r2, [r3, #24]
      break;
 8006768:	e084      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fb3b 	bl	8006dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0208 	orr.w	r2, r2, #8
 8006784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0204 	bic.w	r2, r2, #4
 8006794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69d9      	ldr	r1, [r3, #28]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	61da      	str	r2, [r3, #28]
      break;
 80067a8:	e064      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fba3 	bl	8006efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	021a      	lsls	r2, r3, #8
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	61da      	str	r2, [r3, #28]
      break;
 80067ea:	e043      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fbec 	bl	8006fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0208 	orr.w	r2, r2, #8
 8006806:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0204 	bic.w	r2, r2, #4
 8006816:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800682a:	e023      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fc30 	bl	8007098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006846:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006856:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	021a      	lsls	r2, r3, #8
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800686c:	e002      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]
      break;
 8006872:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800687c:	7dfb      	ldrb	r3, [r7, #23]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop

08006888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_TIM_ConfigClockSource+0x1c>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e0b6      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x18a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e0:	d03e      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0xd8>
 80068e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e6:	f200 8087 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ee:	f000 8086 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x176>
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f6:	d87f      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 80068f8:	2b70      	cmp	r3, #112	@ 0x70
 80068fa:	d01a      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0xaa>
 80068fc:	2b70      	cmp	r3, #112	@ 0x70
 80068fe:	d87b      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 8006900:	2b60      	cmp	r3, #96	@ 0x60
 8006902:	d050      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x11e>
 8006904:	2b60      	cmp	r3, #96	@ 0x60
 8006906:	d877      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 8006908:	2b50      	cmp	r3, #80	@ 0x50
 800690a:	d03c      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0xfe>
 800690c:	2b50      	cmp	r3, #80	@ 0x50
 800690e:	d873      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 8006910:	2b40      	cmp	r3, #64	@ 0x40
 8006912:	d058      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x13e>
 8006914:	2b40      	cmp	r3, #64	@ 0x40
 8006916:	d86f      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 8006918:	2b30      	cmp	r3, #48	@ 0x30
 800691a:	d064      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x15e>
 800691c:	2b30      	cmp	r3, #48	@ 0x30
 800691e:	d86b      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d060      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006924:	2b20      	cmp	r3, #32
 8006926:	d867      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05c      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x15e>
 800692c:	2b10      	cmp	r3, #16
 800692e:	d05a      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006930:	e062      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006942:	f000 fc89 	bl	8007258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	609a      	str	r2, [r3, #8]
      break;
 800695e:	e04f      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006970:	f000 fc72 	bl	8007258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006982:	609a      	str	r2, [r3, #8]
      break;
 8006984:	e03c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006992:	461a      	mov	r2, r3
 8006994:	f000 fbe6 	bl	8007164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2150      	movs	r1, #80	@ 0x50
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fc3f 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 80069a4:	e02c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b2:	461a      	mov	r2, r3
 80069b4:	f000 fc05 	bl	80071c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2160      	movs	r1, #96	@ 0x60
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fc2f 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 80069c4:	e01c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d2:	461a      	mov	r2, r3
 80069d4:	f000 fbc6 	bl	8007164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2140      	movs	r1, #64	@ 0x40
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fc1f 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 80069e4:	e00c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f000 fc16 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 80069f6:	e003      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
      break;
 80069fc:	e000      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a46      	ldr	r2, [pc, #280]	@ (8006b98 <TIM_Base_SetConfig+0x12c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8a:	d00f      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a43      	ldr	r2, [pc, #268]	@ (8006b9c <TIM_Base_SetConfig+0x130>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a42      	ldr	r2, [pc, #264]	@ (8006ba0 <TIM_Base_SetConfig+0x134>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a41      	ldr	r2, [pc, #260]	@ (8006ba4 <TIM_Base_SetConfig+0x138>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a40      	ldr	r2, [pc, #256]	@ (8006ba8 <TIM_Base_SetConfig+0x13c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d108      	bne.n	8006abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a35      	ldr	r2, [pc, #212]	@ (8006b98 <TIM_Base_SetConfig+0x12c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01f      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006acc:	d01b      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a32      	ldr	r2, [pc, #200]	@ (8006b9c <TIM_Base_SetConfig+0x130>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d017      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a31      	ldr	r2, [pc, #196]	@ (8006ba0 <TIM_Base_SetConfig+0x134>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a30      	ldr	r2, [pc, #192]	@ (8006ba4 <TIM_Base_SetConfig+0x138>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8006ba8 <TIM_Base_SetConfig+0x13c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2e      	ldr	r2, [pc, #184]	@ (8006bac <TIM_Base_SetConfig+0x140>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a2d      	ldr	r2, [pc, #180]	@ (8006bb0 <TIM_Base_SetConfig+0x144>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a2c      	ldr	r2, [pc, #176]	@ (8006bb4 <TIM_Base_SetConfig+0x148>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a16      	ldr	r2, [pc, #88]	@ (8006b98 <TIM_Base_SetConfig+0x12c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a18      	ldr	r2, [pc, #96]	@ (8006ba8 <TIM_Base_SetConfig+0x13c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a17      	ldr	r2, [pc, #92]	@ (8006bac <TIM_Base_SetConfig+0x140>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a16      	ldr	r2, [pc, #88]	@ (8006bb0 <TIM_Base_SetConfig+0x144>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a15      	ldr	r2, [pc, #84]	@ (8006bb4 <TIM_Base_SetConfig+0x148>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d103      	bne.n	8006b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d105      	bne.n	8006b8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f023 0201 	bic.w	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	611a      	str	r2, [r3, #16]
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40000400 	.word	0x40000400
 8006ba0:	40000800 	.word	0x40000800
 8006ba4:	40000c00 	.word	0x40000c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800

08006bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	f023 0201 	bic.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0302 	bic.w	r3, r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2c      	ldr	r2, [pc, #176]	@ (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00f      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a2a      	ldr	r2, [pc, #168]	@ (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a29      	ldr	r2, [pc, #164]	@ (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a28      	ldr	r2, [pc, #160]	@ (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d10c      	bne.n	8006c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0308 	bic.w	r3, r3, #8
 8006c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 0304 	bic.w	r3, r3, #4
 8006c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a19      	ldr	r2, [pc, #100]	@ (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	@ (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a17      	ldr	r2, [pc, #92]	@ (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d111      	bne.n	8006c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	621a      	str	r2, [r3, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f023 0210 	bic.w	r2, r3, #16
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a28      	ldr	r2, [pc, #160]	@ (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC2_SetConfig+0x6c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	@ (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10d      	bne.n	8006d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1b      	ldr	r2, [pc, #108]	@ (8006de0 <TIM_OC2_SetConfig+0x108>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006de4 <TIM_OC2_SetConfig+0x10c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a19      	ldr	r2, [pc, #100]	@ (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d113      	bne.n	8006db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a27      	ldr	r2, [pc, #156]	@ (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_OC3_SetConfig+0x6a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a26      	ldr	r2, [pc, #152]	@ (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10d      	bne.n	8006e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1a      	ldr	r2, [pc, #104]	@ (8006ef0 <TIM_OC3_SetConfig+0x104>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	@ (8006ef4 <TIM_OC3_SetConfig+0x108>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a18      	ldr	r2, [pc, #96]	@ (8006ef8 <TIM_OC3_SetConfig+0x10c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d113      	bne.n	8006ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	031b      	lsls	r3, r3, #12
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <TIM_OC4_SetConfig+0xc0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a17      	ldr	r2, [pc, #92]	@ (8006fc0 <TIM_OC4_SetConfig+0xc4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a16      	ldr	r2, [pc, #88]	@ (8006fc4 <TIM_OC4_SetConfig+0xc8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a15      	ldr	r2, [pc, #84]	@ (8006fc8 <TIM_OC4_SetConfig+0xcc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a14      	ldr	r2, [pc, #80]	@ (8006fcc <TIM_OC4_SetConfig+0xd0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d109      	bne.n	8006f94 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40013400 	.word	0x40013400
 8006fc4:	40014000 	.word	0x40014000
 8006fc8:	40014400 	.word	0x40014400
 8006fcc:	40014800 	.word	0x40014800

08006fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a17      	ldr	r2, [pc, #92]	@ (8007084 <TIM_OC5_SetConfig+0xb4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00f      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a16      	ldr	r2, [pc, #88]	@ (8007088 <TIM_OC5_SetConfig+0xb8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00b      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a15      	ldr	r2, [pc, #84]	@ (800708c <TIM_OC5_SetConfig+0xbc>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d007      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a14      	ldr	r2, [pc, #80]	@ (8007090 <TIM_OC5_SetConfig+0xc0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a13      	ldr	r2, [pc, #76]	@ (8007094 <TIM_OC5_SetConfig+0xc4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d109      	bne.n	800705e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007050:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	621a      	str	r2, [r3, #32]
}
 8007078:	bf00      	nop
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	40012c00 	.word	0x40012c00
 8007088:	40013400 	.word	0x40013400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	051b      	lsls	r3, r3, #20
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a18      	ldr	r2, [pc, #96]	@ (8007150 <TIM_OC6_SetConfig+0xb8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00f      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a17      	ldr	r2, [pc, #92]	@ (8007154 <TIM_OC6_SetConfig+0xbc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a16      	ldr	r2, [pc, #88]	@ (8007158 <TIM_OC6_SetConfig+0xc0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a15      	ldr	r2, [pc, #84]	@ (800715c <TIM_OC6_SetConfig+0xc4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a14      	ldr	r2, [pc, #80]	@ (8007160 <TIM_OC6_SetConfig+0xc8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d109      	bne.n	8007128 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800711a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	029b      	lsls	r3, r3, #10
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	40012c00 	.word	0x40012c00
 8007154:	40013400 	.word	0x40013400
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800

08007164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800718e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 030a 	bic.w	r3, r3, #10
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f023 0210 	bic.w	r2, r3, #16
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	031b      	lsls	r3, r3, #12
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	f043 0307 	orr.w	r3, r3, #7
 8007244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	021a      	lsls	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	431a      	orrs	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2201      	movs	r2, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	43db      	mvns	r3, r3
 80072ba:	401a      	ands	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	fa01 f303 	lsl.w	r3, r1, r3
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e068      	b.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2e      	ldr	r2, [pc, #184]	@ (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2d      	ldr	r2, [pc, #180]	@ (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d108      	bne.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1e      	ldr	r2, [pc, #120]	@ (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800736e:	d018      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1b      	ldr	r2, [pc, #108]	@ (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1a      	ldr	r2, [pc, #104]	@ (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a18      	ldr	r2, [pc, #96]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a13      	ldr	r2, [pc, #76]	@ (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a14      	ldr	r2, [pc, #80]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d10c      	bne.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40013400 	.word	0x40013400
 80073e4:	40000400 	.word	0x40000400
 80073e8:	40000800 	.word	0x40000800
 80073ec:	40000c00 	.word	0x40000c00
 80073f0:	40014000 	.word	0x40014000

080073f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e040      	b.n	80074c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fa fbe4 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2224      	movs	r2, #36	@ 0x24
 800745c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fb6a 	bl	8007b50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8af 	bl	80075e0 <UART_SetConfig>
 8007482:	4603      	mov	r3, r0
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e01b      	b.n	80074c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800749a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fbe9 	bl	8007c94 <UART_CheckIdleState>
 80074c2:	4603      	mov	r3, r0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	@ 0x28
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d177      	bne.n	80075d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_UART_Transmit+0x24>
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e070      	b.n	80075d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2221      	movs	r2, #33	@ 0x21
 8007500:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007502:	f7fa fd71 	bl	8001fe8 <HAL_GetTick>
 8007506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	88fa      	ldrh	r2, [r7, #6]
 800750c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007520:	d108      	bne.n	8007534 <HAL_UART_Transmit+0x68>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e003      	b.n	800753c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800753c:	e02f      	b.n	800759e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2200      	movs	r2, #0
 8007546:	2180      	movs	r1, #128	@ 0x80
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fc4b 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e03b      	b.n	80075d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10b      	bne.n	800757c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007570:	b292      	uxth	r2, r2
 8007572:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3302      	adds	r3, #2
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e007      	b.n	800758c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3301      	adds	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1c9      	bne.n	800753e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2200      	movs	r2, #0
 80075b2:	2140      	movs	r1, #64	@ 0x40
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fc15 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e005      	b.n	80075d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2220      	movs	r2, #32
 80075ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	e000      	b.n	80075d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80075d4:	2302      	movs	r3, #2
  }
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e4:	b08a      	sub	sp, #40	@ 0x28
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	431a      	orrs	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	431a      	orrs	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	4313      	orrs	r3, r2
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4ba4      	ldr	r3, [pc, #656]	@ (80078a0 <UART_SetConfig+0x2c0>)
 8007610:	4013      	ands	r3, r2
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007618:	430b      	orrs	r3, r1
 800761a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a99      	ldr	r2, [pc, #612]	@ (80078a4 <UART_SetConfig+0x2c4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007648:	4313      	orrs	r3, r2
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a90      	ldr	r2, [pc, #576]	@ (80078a8 <UART_SetConfig+0x2c8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d126      	bne.n	80076b8 <UART_SetConfig+0xd8>
 800766a:	4b90      	ldr	r3, [pc, #576]	@ (80078ac <UART_SetConfig+0x2cc>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	2b03      	cmp	r3, #3
 8007676:	d81b      	bhi.n	80076b0 <UART_SetConfig+0xd0>
 8007678:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <UART_SetConfig+0xa0>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	08007691 	.word	0x08007691
 8007684:	080076a1 	.word	0x080076a1
 8007688:	08007699 	.word	0x08007699
 800768c:	080076a9 	.word	0x080076a9
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007696:	e116      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007698:	2302      	movs	r3, #2
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769e:	e112      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80076a0:	2304      	movs	r3, #4
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076a6:	e10e      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80076a8:	2308      	movs	r3, #8
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ae:	e10a      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80076b0:	2310      	movs	r3, #16
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076b6:	e106      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a7c      	ldr	r2, [pc, #496]	@ (80078b0 <UART_SetConfig+0x2d0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d138      	bne.n	8007734 <UART_SetConfig+0x154>
 80076c2:	4b7a      	ldr	r3, [pc, #488]	@ (80078ac <UART_SetConfig+0x2cc>)
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c8:	f003 030c 	and.w	r3, r3, #12
 80076cc:	2b0c      	cmp	r3, #12
 80076ce:	d82d      	bhi.n	800772c <UART_SetConfig+0x14c>
 80076d0:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <UART_SetConfig+0xf8>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	0800770d 	.word	0x0800770d
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	0800772d 	.word	0x0800772d
 80076e4:	0800772d 	.word	0x0800772d
 80076e8:	0800771d 	.word	0x0800771d
 80076ec:	0800772d 	.word	0x0800772d
 80076f0:	0800772d 	.word	0x0800772d
 80076f4:	0800772d 	.word	0x0800772d
 80076f8:	08007715 	.word	0x08007715
 80076fc:	0800772d 	.word	0x0800772d
 8007700:	0800772d 	.word	0x0800772d
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007725 	.word	0x08007725
 800770c:	2300      	movs	r3, #0
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007712:	e0d8      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007714:	2302      	movs	r3, #2
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800771a:	e0d4      	b.n	80078c6 <UART_SetConfig+0x2e6>
 800771c:	2304      	movs	r3, #4
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007722:	e0d0      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007724:	2308      	movs	r3, #8
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800772a:	e0cc      	b.n	80078c6 <UART_SetConfig+0x2e6>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007732:	e0c8      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a5e      	ldr	r2, [pc, #376]	@ (80078b4 <UART_SetConfig+0x2d4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d125      	bne.n	800778a <UART_SetConfig+0x1aa>
 800773e:	4b5b      	ldr	r3, [pc, #364]	@ (80078ac <UART_SetConfig+0x2cc>)
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007744:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007748:	2b30      	cmp	r3, #48	@ 0x30
 800774a:	d016      	beq.n	800777a <UART_SetConfig+0x19a>
 800774c:	2b30      	cmp	r3, #48	@ 0x30
 800774e:	d818      	bhi.n	8007782 <UART_SetConfig+0x1a2>
 8007750:	2b20      	cmp	r3, #32
 8007752:	d00a      	beq.n	800776a <UART_SetConfig+0x18a>
 8007754:	2b20      	cmp	r3, #32
 8007756:	d814      	bhi.n	8007782 <UART_SetConfig+0x1a2>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <UART_SetConfig+0x182>
 800775c:	2b10      	cmp	r3, #16
 800775e:	d008      	beq.n	8007772 <UART_SetConfig+0x192>
 8007760:	e00f      	b.n	8007782 <UART_SetConfig+0x1a2>
 8007762:	2300      	movs	r3, #0
 8007764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007768:	e0ad      	b.n	80078c6 <UART_SetConfig+0x2e6>
 800776a:	2302      	movs	r3, #2
 800776c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007770:	e0a9      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007772:	2304      	movs	r3, #4
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007778:	e0a5      	b.n	80078c6 <UART_SetConfig+0x2e6>
 800777a:	2308      	movs	r3, #8
 800777c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007780:	e0a1      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007782:	2310      	movs	r3, #16
 8007784:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007788:	e09d      	b.n	80078c6 <UART_SetConfig+0x2e6>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a4a      	ldr	r2, [pc, #296]	@ (80078b8 <UART_SetConfig+0x2d8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d125      	bne.n	80077e0 <UART_SetConfig+0x200>
 8007794:	4b45      	ldr	r3, [pc, #276]	@ (80078ac <UART_SetConfig+0x2cc>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800779e:	2bc0      	cmp	r3, #192	@ 0xc0
 80077a0:	d016      	beq.n	80077d0 <UART_SetConfig+0x1f0>
 80077a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80077a4:	d818      	bhi.n	80077d8 <UART_SetConfig+0x1f8>
 80077a6:	2b80      	cmp	r3, #128	@ 0x80
 80077a8:	d00a      	beq.n	80077c0 <UART_SetConfig+0x1e0>
 80077aa:	2b80      	cmp	r3, #128	@ 0x80
 80077ac:	d814      	bhi.n	80077d8 <UART_SetConfig+0x1f8>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <UART_SetConfig+0x1d8>
 80077b2:	2b40      	cmp	r3, #64	@ 0x40
 80077b4:	d008      	beq.n	80077c8 <UART_SetConfig+0x1e8>
 80077b6:	e00f      	b.n	80077d8 <UART_SetConfig+0x1f8>
 80077b8:	2300      	movs	r3, #0
 80077ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077be:	e082      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80077c0:	2302      	movs	r3, #2
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077c6:	e07e      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80077c8:	2304      	movs	r3, #4
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ce:	e07a      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80077d0:	2308      	movs	r3, #8
 80077d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077d6:	e076      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80077d8:	2310      	movs	r3, #16
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077de:	e072      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a35      	ldr	r2, [pc, #212]	@ (80078bc <UART_SetConfig+0x2dc>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d12a      	bne.n	8007840 <UART_SetConfig+0x260>
 80077ea:	4b30      	ldr	r3, [pc, #192]	@ (80078ac <UART_SetConfig+0x2cc>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077f8:	d01a      	beq.n	8007830 <UART_SetConfig+0x250>
 80077fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077fe:	d81b      	bhi.n	8007838 <UART_SetConfig+0x258>
 8007800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007804:	d00c      	beq.n	8007820 <UART_SetConfig+0x240>
 8007806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800780a:	d815      	bhi.n	8007838 <UART_SetConfig+0x258>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <UART_SetConfig+0x238>
 8007810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007814:	d008      	beq.n	8007828 <UART_SetConfig+0x248>
 8007816:	e00f      	b.n	8007838 <UART_SetConfig+0x258>
 8007818:	2300      	movs	r3, #0
 800781a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781e:	e052      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007820:	2302      	movs	r3, #2
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007826:	e04e      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007828:	2304      	movs	r3, #4
 800782a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800782e:	e04a      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007836:	e046      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007838:	2310      	movs	r3, #16
 800783a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800783e:	e042      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a17      	ldr	r2, [pc, #92]	@ (80078a4 <UART_SetConfig+0x2c4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d13a      	bne.n	80078c0 <UART_SetConfig+0x2e0>
 800784a:	4b18      	ldr	r3, [pc, #96]	@ (80078ac <UART_SetConfig+0x2cc>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007850:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007854:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007858:	d01a      	beq.n	8007890 <UART_SetConfig+0x2b0>
 800785a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800785e:	d81b      	bhi.n	8007898 <UART_SetConfig+0x2b8>
 8007860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007864:	d00c      	beq.n	8007880 <UART_SetConfig+0x2a0>
 8007866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800786a:	d815      	bhi.n	8007898 <UART_SetConfig+0x2b8>
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <UART_SetConfig+0x298>
 8007870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007874:	d008      	beq.n	8007888 <UART_SetConfig+0x2a8>
 8007876:	e00f      	b.n	8007898 <UART_SetConfig+0x2b8>
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787e:	e022      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007880:	2302      	movs	r3, #2
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007886:	e01e      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007888:	2304      	movs	r3, #4
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800788e:	e01a      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007890:	2308      	movs	r3, #8
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007896:	e016      	b.n	80078c6 <UART_SetConfig+0x2e6>
 8007898:	2310      	movs	r3, #16
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789e:	e012      	b.n	80078c6 <UART_SetConfig+0x2e6>
 80078a0:	efff69f3 	.word	0xefff69f3
 80078a4:	40008000 	.word	0x40008000
 80078a8:	40013800 	.word	0x40013800
 80078ac:	40021000 	.word	0x40021000
 80078b0:	40004400 	.word	0x40004400
 80078b4:	40004800 	.word	0x40004800
 80078b8:	40004c00 	.word	0x40004c00
 80078bc:	40005000 	.word	0x40005000
 80078c0:	2310      	movs	r3, #16
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a9f      	ldr	r2, [pc, #636]	@ (8007b48 <UART_SetConfig+0x568>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d17a      	bne.n	80079c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d824      	bhi.n	8007922 <UART_SetConfig+0x342>
 80078d8:	a201      	add	r2, pc, #4	@ (adr r2, 80078e0 <UART_SetConfig+0x300>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	08007905 	.word	0x08007905
 80078e4:	08007923 	.word	0x08007923
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	08007923 	.word	0x08007923
 80078f0:	08007913 	.word	0x08007913
 80078f4:	08007923 	.word	0x08007923
 80078f8:	08007923 	.word	0x08007923
 80078fc:	08007923 	.word	0x08007923
 8007900:	0800791b 	.word	0x0800791b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007904:	f7fd fd6a 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8007908:	61f8      	str	r0, [r7, #28]
        break;
 800790a:	e010      	b.n	800792e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800790c:	4b8f      	ldr	r3, [pc, #572]	@ (8007b4c <UART_SetConfig+0x56c>)
 800790e:	61fb      	str	r3, [r7, #28]
        break;
 8007910:	e00d      	b.n	800792e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007912:	f7fd fccb 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8007916:	61f8      	str	r0, [r7, #28]
        break;
 8007918:	e009      	b.n	800792e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800791a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800791e:	61fb      	str	r3, [r7, #28]
        break;
 8007920:	e005      	b.n	800792e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800792c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80fb 	beq.w	8007b2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	429a      	cmp	r2, r3
 8007944:	d305      	bcc.n	8007952 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	429a      	cmp	r2, r3
 8007950:	d903      	bls.n	800795a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007958:	e0e8      	b.n	8007b2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2200      	movs	r2, #0
 800795e:	461c      	mov	r4, r3
 8007960:	4615      	mov	r5, r2
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	f04f 0300 	mov.w	r3, #0
 800796a:	022b      	lsls	r3, r5, #8
 800796c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007970:	0222      	lsls	r2, r4, #8
 8007972:	68f9      	ldr	r1, [r7, #12]
 8007974:	6849      	ldr	r1, [r1, #4]
 8007976:	0849      	lsrs	r1, r1, #1
 8007978:	2000      	movs	r0, #0
 800797a:	4688      	mov	r8, r1
 800797c:	4681      	mov	r9, r0
 800797e:	eb12 0a08 	adds.w	sl, r2, r8
 8007982:	eb43 0b09 	adc.w	fp, r3, r9
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007994:	4650      	mov	r0, sl
 8007996:	4659      	mov	r1, fp
 8007998:	f7f8 ff78 	bl	800088c <__aeabi_uldivmod>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4613      	mov	r3, r2
 80079a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079aa:	d308      	bcc.n	80079be <UART_SetConfig+0x3de>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079b2:	d204      	bcs.n	80079be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	60da      	str	r2, [r3, #12]
 80079bc:	e0b6      	b.n	8007b2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079c4:	e0b2      	b.n	8007b2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ce:	d15e      	bne.n	8007a8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d828      	bhi.n	8007a2a <UART_SetConfig+0x44a>
 80079d8:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <UART_SetConfig+0x400>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	08007a05 	.word	0x08007a05
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a15 	.word	0x08007a15
 80079ec:	08007a2b 	.word	0x08007a2b
 80079f0:	08007a1b 	.word	0x08007a1b
 80079f4:	08007a2b 	.word	0x08007a2b
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a2b 	.word	0x08007a2b
 8007a00:	08007a23 	.word	0x08007a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a04:	f7fd fcea 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8007a08:	61f8      	str	r0, [r7, #28]
        break;
 8007a0a:	e014      	b.n	8007a36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a0c:	f7fd fcfc 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 8007a10:	61f8      	str	r0, [r7, #28]
        break;
 8007a12:	e010      	b.n	8007a36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a14:	4b4d      	ldr	r3, [pc, #308]	@ (8007b4c <UART_SetConfig+0x56c>)
 8007a16:	61fb      	str	r3, [r7, #28]
        break;
 8007a18:	e00d      	b.n	8007a36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1a:	f7fd fc47 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8007a1e:	61f8      	str	r0, [r7, #28]
        break;
 8007a20:	e009      	b.n	8007a36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a26:	61fb      	str	r3, [r7, #28]
        break;
 8007a28:	e005      	b.n	8007a36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d077      	beq.n	8007b2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	005a      	lsls	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	441a      	add	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b0f      	cmp	r3, #15
 8007a56:	d916      	bls.n	8007a86 <UART_SetConfig+0x4a6>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5e:	d212      	bcs.n	8007a86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f023 030f 	bic.w	r3, r3, #15
 8007a68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	8afb      	ldrh	r3, [r7, #22]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	8afa      	ldrh	r2, [r7, #22]
 8007a82:	60da      	str	r2, [r3, #12]
 8007a84:	e052      	b.n	8007b2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a8c:	e04e      	b.n	8007b2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d827      	bhi.n	8007ae6 <UART_SetConfig+0x506>
 8007a96:	a201      	add	r2, pc, #4	@ (adr r2, 8007a9c <UART_SetConfig+0x4bc>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007ae7 	.word	0x08007ae7
 8007aac:	08007ad7 	.word	0x08007ad7
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007ae7 	.word	0x08007ae7
 8007ab8:	08007ae7 	.word	0x08007ae7
 8007abc:	08007adf 	.word	0x08007adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac0:	f7fd fc8c 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8007ac4:	61f8      	str	r0, [r7, #28]
        break;
 8007ac6:	e014      	b.n	8007af2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7fd fc9e 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 8007acc:	61f8      	str	r0, [r7, #28]
        break;
 8007ace:	e010      	b.n	8007af2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8007b4c <UART_SetConfig+0x56c>)
 8007ad2:	61fb      	str	r3, [r7, #28]
        break;
 8007ad4:	e00d      	b.n	8007af2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad6:	f7fd fbe9 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8007ada:	61f8      	str	r0, [r7, #28]
        break;
 8007adc:	e009      	b.n	8007af2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae2:	61fb      	str	r3, [r7, #28]
        break;
 8007ae4:	e005      	b.n	8007af2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007af0:	bf00      	nop
    }

    if (pclk != 0U)
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d019      	beq.n	8007b2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	085a      	lsrs	r2, r3, #1
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	441a      	add	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b0f      	cmp	r3, #15
 8007b10:	d909      	bls.n	8007b26 <UART_SetConfig+0x546>
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b18:	d205      	bcs.n	8007b26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60da      	str	r2, [r3, #12]
 8007b24:	e002      	b.n	8007b2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3728      	adds	r7, #40	@ 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b46:	bf00      	nop
 8007b48:	40008000 	.word	0x40008000
 8007b4c:	00f42400 	.word	0x00f42400

08007b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc2:	f003 0304 	and.w	r3, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01a      	beq.n	8007c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4e:	d10a      	bne.n	8007c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	605a      	str	r2, [r3, #4]
  }
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b098      	sub	sp, #96	@ 0x60
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca4:	f7fa f9a0 	bl	8001fe8 <HAL_GetTick>
 8007ca8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d12e      	bne.n	8007d16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f88c 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d021      	beq.n	8007d16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e6      	bne.n	8007cd2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e062      	b.n	8007ddc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d149      	bne.n	8007db8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f856 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d03c      	beq.n	8007db8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0301 	bic.w	r3, r3, #1
 8007d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d90:	61fa      	str	r2, [r7, #28]
 8007d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	69b9      	ldr	r1, [r7, #24]
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e011      	b.n	8007ddc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3758      	adds	r7, #88	@ 0x58
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df4:	e04f      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d04b      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfe:	f7fa f8f3 	bl	8001fe8 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d302      	bcc.n	8007e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e04e      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d037      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b80      	cmp	r3, #128	@ 0x80
 8007e2a:	d034      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b40      	cmp	r3, #64	@ 0x40
 8007e30:	d031      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d110      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2208      	movs	r2, #8
 8007e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f838 	bl	8007ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2208      	movs	r2, #8
 8007e52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e029      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e70:	d111      	bne.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f81e 	bl	8007ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e00f      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69da      	ldr	r2, [r3, #28]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	bf0c      	ite	eq
 8007ea6:	2301      	moveq	r3, #1
 8007ea8:	2300      	movne	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d0a0      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b095      	sub	sp, #84	@ 0x54
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e6      	bne.n	8007ec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f023 0301 	bic.w	r3, r3, #1
 8007f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3308      	adds	r3, #8
 8007f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e5      	bne.n	8007ef8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d118      	bne.n	8007f66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f023 0310 	bic.w	r3, r3, #16
 8007f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f52:	61bb      	str	r3, [r7, #24]
 8007f54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6979      	ldr	r1, [r7, #20]
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e6      	bne.n	8007f34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f7a:	bf00      	nop
 8007f7c:	3754      	adds	r7, #84	@ 0x54
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <sniprintf>:
 8007f88:	b40c      	push	{r2, r3}
 8007f8a:	b530      	push	{r4, r5, lr}
 8007f8c:	4b17      	ldr	r3, [pc, #92]	@ (8007fec <sniprintf+0x64>)
 8007f8e:	1e0c      	subs	r4, r1, #0
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	b09d      	sub	sp, #116	@ 0x74
 8007f94:	da08      	bge.n	8007fa8 <sniprintf+0x20>
 8007f96:	238b      	movs	r3, #139	@ 0x8b
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9e:	b01d      	add	sp, #116	@ 0x74
 8007fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fa4:	b002      	add	sp, #8
 8007fa6:	4770      	bx	lr
 8007fa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fb0:	bf14      	ite	ne
 8007fb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fb6:	4623      	moveq	r3, r4
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	9307      	str	r3, [sp, #28]
 8007fbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fc0:	9002      	str	r0, [sp, #8]
 8007fc2:	9006      	str	r0, [sp, #24]
 8007fc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fca:	ab21      	add	r3, sp, #132	@ 0x84
 8007fcc:	a902      	add	r1, sp, #8
 8007fce:	4628      	mov	r0, r5
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	f000 f995 	bl	8008300 <_svfiprintf_r>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	bfbc      	itt	lt
 8007fda:	238b      	movlt	r3, #139	@ 0x8b
 8007fdc:	602b      	strlt	r3, [r5, #0]
 8007fde:	2c00      	cmp	r4, #0
 8007fe0:	d0dd      	beq.n	8007f9e <sniprintf+0x16>
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	e7d9      	b.n	8007f9e <sniprintf+0x16>
 8007fea:	bf00      	nop
 8007fec:	20000024 	.word	0x20000024

08007ff0 <memset>:
 8007ff0:	4402      	add	r2, r0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d100      	bne.n	8007ffa <memset+0xa>
 8007ff8:	4770      	bx	lr
 8007ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffe:	e7f9      	b.n	8007ff4 <memset+0x4>

08008000 <__errno>:
 8008000:	4b01      	ldr	r3, [pc, #4]	@ (8008008 <__errno+0x8>)
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20000024 	.word	0x20000024

0800800c <__libc_init_array>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4d0d      	ldr	r5, [pc, #52]	@ (8008044 <__libc_init_array+0x38>)
 8008010:	4c0d      	ldr	r4, [pc, #52]	@ (8008048 <__libc_init_array+0x3c>)
 8008012:	1b64      	subs	r4, r4, r5
 8008014:	10a4      	asrs	r4, r4, #2
 8008016:	2600      	movs	r6, #0
 8008018:	42a6      	cmp	r6, r4
 800801a:	d109      	bne.n	8008030 <__libc_init_array+0x24>
 800801c:	4d0b      	ldr	r5, [pc, #44]	@ (800804c <__libc_init_array+0x40>)
 800801e:	4c0c      	ldr	r4, [pc, #48]	@ (8008050 <__libc_init_array+0x44>)
 8008020:	f000 fc66 	bl	80088f0 <_init>
 8008024:	1b64      	subs	r4, r4, r5
 8008026:	10a4      	asrs	r4, r4, #2
 8008028:	2600      	movs	r6, #0
 800802a:	42a6      	cmp	r6, r4
 800802c:	d105      	bne.n	800803a <__libc_init_array+0x2e>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	f855 3b04 	ldr.w	r3, [r5], #4
 8008034:	4798      	blx	r3
 8008036:	3601      	adds	r6, #1
 8008038:	e7ee      	b.n	8008018 <__libc_init_array+0xc>
 800803a:	f855 3b04 	ldr.w	r3, [r5], #4
 800803e:	4798      	blx	r3
 8008040:	3601      	adds	r6, #1
 8008042:	e7f2      	b.n	800802a <__libc_init_array+0x1e>
 8008044:	080089ac 	.word	0x080089ac
 8008048:	080089ac 	.word	0x080089ac
 800804c:	080089ac 	.word	0x080089ac
 8008050:	080089b0 	.word	0x080089b0

08008054 <__retarget_lock_acquire_recursive>:
 8008054:	4770      	bx	lr

08008056 <__retarget_lock_release_recursive>:
 8008056:	4770      	bx	lr

08008058 <_free_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4605      	mov	r5, r0
 800805c:	2900      	cmp	r1, #0
 800805e:	d041      	beq.n	80080e4 <_free_r+0x8c>
 8008060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008064:	1f0c      	subs	r4, r1, #4
 8008066:	2b00      	cmp	r3, #0
 8008068:	bfb8      	it	lt
 800806a:	18e4      	addlt	r4, r4, r3
 800806c:	f000 f8e0 	bl	8008230 <__malloc_lock>
 8008070:	4a1d      	ldr	r2, [pc, #116]	@ (80080e8 <_free_r+0x90>)
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	b933      	cbnz	r3, 8008084 <_free_r+0x2c>
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	6014      	str	r4, [r2, #0]
 800807a:	4628      	mov	r0, r5
 800807c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008080:	f000 b8dc 	b.w	800823c <__malloc_unlock>
 8008084:	42a3      	cmp	r3, r4
 8008086:	d908      	bls.n	800809a <_free_r+0x42>
 8008088:	6820      	ldr	r0, [r4, #0]
 800808a:	1821      	adds	r1, r4, r0
 800808c:	428b      	cmp	r3, r1
 800808e:	bf01      	itttt	eq
 8008090:	6819      	ldreq	r1, [r3, #0]
 8008092:	685b      	ldreq	r3, [r3, #4]
 8008094:	1809      	addeq	r1, r1, r0
 8008096:	6021      	streq	r1, [r4, #0]
 8008098:	e7ed      	b.n	8008076 <_free_r+0x1e>
 800809a:	461a      	mov	r2, r3
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	b10b      	cbz	r3, 80080a4 <_free_r+0x4c>
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d9fa      	bls.n	800809a <_free_r+0x42>
 80080a4:	6811      	ldr	r1, [r2, #0]
 80080a6:	1850      	adds	r0, r2, r1
 80080a8:	42a0      	cmp	r0, r4
 80080aa:	d10b      	bne.n	80080c4 <_free_r+0x6c>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	4401      	add	r1, r0
 80080b0:	1850      	adds	r0, r2, r1
 80080b2:	4283      	cmp	r3, r0
 80080b4:	6011      	str	r1, [r2, #0]
 80080b6:	d1e0      	bne.n	800807a <_free_r+0x22>
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	6053      	str	r3, [r2, #4]
 80080be:	4408      	add	r0, r1
 80080c0:	6010      	str	r0, [r2, #0]
 80080c2:	e7da      	b.n	800807a <_free_r+0x22>
 80080c4:	d902      	bls.n	80080cc <_free_r+0x74>
 80080c6:	230c      	movs	r3, #12
 80080c8:	602b      	str	r3, [r5, #0]
 80080ca:	e7d6      	b.n	800807a <_free_r+0x22>
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	1821      	adds	r1, r4, r0
 80080d0:	428b      	cmp	r3, r1
 80080d2:	bf04      	itt	eq
 80080d4:	6819      	ldreq	r1, [r3, #0]
 80080d6:	685b      	ldreq	r3, [r3, #4]
 80080d8:	6063      	str	r3, [r4, #4]
 80080da:	bf04      	itt	eq
 80080dc:	1809      	addeq	r1, r1, r0
 80080de:	6021      	streq	r1, [r4, #0]
 80080e0:	6054      	str	r4, [r2, #4]
 80080e2:	e7ca      	b.n	800807a <_free_r+0x22>
 80080e4:	bd38      	pop	{r3, r4, r5, pc}
 80080e6:	bf00      	nop
 80080e8:	2000050c 	.word	0x2000050c

080080ec <sbrk_aligned>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4e0f      	ldr	r6, [pc, #60]	@ (800812c <sbrk_aligned+0x40>)
 80080f0:	460c      	mov	r4, r1
 80080f2:	6831      	ldr	r1, [r6, #0]
 80080f4:	4605      	mov	r5, r0
 80080f6:	b911      	cbnz	r1, 80080fe <sbrk_aligned+0x12>
 80080f8:	f000 fba6 	bl	8008848 <_sbrk_r>
 80080fc:	6030      	str	r0, [r6, #0]
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 fba1 	bl	8008848 <_sbrk_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d103      	bne.n	8008112 <sbrk_aligned+0x26>
 800810a:	f04f 34ff 	mov.w	r4, #4294967295
 800810e:	4620      	mov	r0, r4
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	1cc4      	adds	r4, r0, #3
 8008114:	f024 0403 	bic.w	r4, r4, #3
 8008118:	42a0      	cmp	r0, r4
 800811a:	d0f8      	beq.n	800810e <sbrk_aligned+0x22>
 800811c:	1a21      	subs	r1, r4, r0
 800811e:	4628      	mov	r0, r5
 8008120:	f000 fb92 	bl	8008848 <_sbrk_r>
 8008124:	3001      	adds	r0, #1
 8008126:	d1f2      	bne.n	800810e <sbrk_aligned+0x22>
 8008128:	e7ef      	b.n	800810a <sbrk_aligned+0x1e>
 800812a:	bf00      	nop
 800812c:	20000508 	.word	0x20000508

08008130 <_malloc_r>:
 8008130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008134:	1ccd      	adds	r5, r1, #3
 8008136:	f025 0503 	bic.w	r5, r5, #3
 800813a:	3508      	adds	r5, #8
 800813c:	2d0c      	cmp	r5, #12
 800813e:	bf38      	it	cc
 8008140:	250c      	movcc	r5, #12
 8008142:	2d00      	cmp	r5, #0
 8008144:	4606      	mov	r6, r0
 8008146:	db01      	blt.n	800814c <_malloc_r+0x1c>
 8008148:	42a9      	cmp	r1, r5
 800814a:	d904      	bls.n	8008156 <_malloc_r+0x26>
 800814c:	230c      	movs	r3, #12
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	2000      	movs	r0, #0
 8008152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800822c <_malloc_r+0xfc>
 800815a:	f000 f869 	bl	8008230 <__malloc_lock>
 800815e:	f8d8 3000 	ldr.w	r3, [r8]
 8008162:	461c      	mov	r4, r3
 8008164:	bb44      	cbnz	r4, 80081b8 <_malloc_r+0x88>
 8008166:	4629      	mov	r1, r5
 8008168:	4630      	mov	r0, r6
 800816a:	f7ff ffbf 	bl	80080ec <sbrk_aligned>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	4604      	mov	r4, r0
 8008172:	d158      	bne.n	8008226 <_malloc_r+0xf6>
 8008174:	f8d8 4000 	ldr.w	r4, [r8]
 8008178:	4627      	mov	r7, r4
 800817a:	2f00      	cmp	r7, #0
 800817c:	d143      	bne.n	8008206 <_malloc_r+0xd6>
 800817e:	2c00      	cmp	r4, #0
 8008180:	d04b      	beq.n	800821a <_malloc_r+0xea>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	4639      	mov	r1, r7
 8008186:	4630      	mov	r0, r6
 8008188:	eb04 0903 	add.w	r9, r4, r3
 800818c:	f000 fb5c 	bl	8008848 <_sbrk_r>
 8008190:	4581      	cmp	r9, r0
 8008192:	d142      	bne.n	800821a <_malloc_r+0xea>
 8008194:	6821      	ldr	r1, [r4, #0]
 8008196:	1a6d      	subs	r5, r5, r1
 8008198:	4629      	mov	r1, r5
 800819a:	4630      	mov	r0, r6
 800819c:	f7ff ffa6 	bl	80080ec <sbrk_aligned>
 80081a0:	3001      	adds	r0, #1
 80081a2:	d03a      	beq.n	800821a <_malloc_r+0xea>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	442b      	add	r3, r5
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	f8d8 3000 	ldr.w	r3, [r8]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	bb62      	cbnz	r2, 800820c <_malloc_r+0xdc>
 80081b2:	f8c8 7000 	str.w	r7, [r8]
 80081b6:	e00f      	b.n	80081d8 <_malloc_r+0xa8>
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	1b52      	subs	r2, r2, r5
 80081bc:	d420      	bmi.n	8008200 <_malloc_r+0xd0>
 80081be:	2a0b      	cmp	r2, #11
 80081c0:	d917      	bls.n	80081f2 <_malloc_r+0xc2>
 80081c2:	1961      	adds	r1, r4, r5
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	6025      	str	r5, [r4, #0]
 80081c8:	bf18      	it	ne
 80081ca:	6059      	strne	r1, [r3, #4]
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	bf08      	it	eq
 80081d0:	f8c8 1000 	streq.w	r1, [r8]
 80081d4:	5162      	str	r2, [r4, r5]
 80081d6:	604b      	str	r3, [r1, #4]
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f82f 	bl	800823c <__malloc_unlock>
 80081de:	f104 000b 	add.w	r0, r4, #11
 80081e2:	1d23      	adds	r3, r4, #4
 80081e4:	f020 0007 	bic.w	r0, r0, #7
 80081e8:	1ac2      	subs	r2, r0, r3
 80081ea:	bf1c      	itt	ne
 80081ec:	1a1b      	subne	r3, r3, r0
 80081ee:	50a3      	strne	r3, [r4, r2]
 80081f0:	e7af      	b.n	8008152 <_malloc_r+0x22>
 80081f2:	6862      	ldr	r2, [r4, #4]
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	bf0c      	ite	eq
 80081f8:	f8c8 2000 	streq.w	r2, [r8]
 80081fc:	605a      	strne	r2, [r3, #4]
 80081fe:	e7eb      	b.n	80081d8 <_malloc_r+0xa8>
 8008200:	4623      	mov	r3, r4
 8008202:	6864      	ldr	r4, [r4, #4]
 8008204:	e7ae      	b.n	8008164 <_malloc_r+0x34>
 8008206:	463c      	mov	r4, r7
 8008208:	687f      	ldr	r7, [r7, #4]
 800820a:	e7b6      	b.n	800817a <_malloc_r+0x4a>
 800820c:	461a      	mov	r2, r3
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	42a3      	cmp	r3, r4
 8008212:	d1fb      	bne.n	800820c <_malloc_r+0xdc>
 8008214:	2300      	movs	r3, #0
 8008216:	6053      	str	r3, [r2, #4]
 8008218:	e7de      	b.n	80081d8 <_malloc_r+0xa8>
 800821a:	230c      	movs	r3, #12
 800821c:	6033      	str	r3, [r6, #0]
 800821e:	4630      	mov	r0, r6
 8008220:	f000 f80c 	bl	800823c <__malloc_unlock>
 8008224:	e794      	b.n	8008150 <_malloc_r+0x20>
 8008226:	6005      	str	r5, [r0, #0]
 8008228:	e7d6      	b.n	80081d8 <_malloc_r+0xa8>
 800822a:	bf00      	nop
 800822c:	2000050c 	.word	0x2000050c

08008230 <__malloc_lock>:
 8008230:	4801      	ldr	r0, [pc, #4]	@ (8008238 <__malloc_lock+0x8>)
 8008232:	f7ff bf0f 	b.w	8008054 <__retarget_lock_acquire_recursive>
 8008236:	bf00      	nop
 8008238:	20000504 	.word	0x20000504

0800823c <__malloc_unlock>:
 800823c:	4801      	ldr	r0, [pc, #4]	@ (8008244 <__malloc_unlock+0x8>)
 800823e:	f7ff bf0a 	b.w	8008056 <__retarget_lock_release_recursive>
 8008242:	bf00      	nop
 8008244:	20000504 	.word	0x20000504

08008248 <__ssputs_r>:
 8008248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	688e      	ldr	r6, [r1, #8]
 800824e:	461f      	mov	r7, r3
 8008250:	42be      	cmp	r6, r7
 8008252:	680b      	ldr	r3, [r1, #0]
 8008254:	4682      	mov	sl, r0
 8008256:	460c      	mov	r4, r1
 8008258:	4690      	mov	r8, r2
 800825a:	d82d      	bhi.n	80082b8 <__ssputs_r+0x70>
 800825c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008260:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008264:	d026      	beq.n	80082b4 <__ssputs_r+0x6c>
 8008266:	6965      	ldr	r5, [r4, #20]
 8008268:	6909      	ldr	r1, [r1, #16]
 800826a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800826e:	eba3 0901 	sub.w	r9, r3, r1
 8008272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008276:	1c7b      	adds	r3, r7, #1
 8008278:	444b      	add	r3, r9
 800827a:	106d      	asrs	r5, r5, #1
 800827c:	429d      	cmp	r5, r3
 800827e:	bf38      	it	cc
 8008280:	461d      	movcc	r5, r3
 8008282:	0553      	lsls	r3, r2, #21
 8008284:	d527      	bpl.n	80082d6 <__ssputs_r+0x8e>
 8008286:	4629      	mov	r1, r5
 8008288:	f7ff ff52 	bl	8008130 <_malloc_r>
 800828c:	4606      	mov	r6, r0
 800828e:	b360      	cbz	r0, 80082ea <__ssputs_r+0xa2>
 8008290:	6921      	ldr	r1, [r4, #16]
 8008292:	464a      	mov	r2, r9
 8008294:	f000 fae8 	bl	8008868 <memcpy>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800829e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	6126      	str	r6, [r4, #16]
 80082a6:	6165      	str	r5, [r4, #20]
 80082a8:	444e      	add	r6, r9
 80082aa:	eba5 0509 	sub.w	r5, r5, r9
 80082ae:	6026      	str	r6, [r4, #0]
 80082b0:	60a5      	str	r5, [r4, #8]
 80082b2:	463e      	mov	r6, r7
 80082b4:	42be      	cmp	r6, r7
 80082b6:	d900      	bls.n	80082ba <__ssputs_r+0x72>
 80082b8:	463e      	mov	r6, r7
 80082ba:	6820      	ldr	r0, [r4, #0]
 80082bc:	4632      	mov	r2, r6
 80082be:	4641      	mov	r1, r8
 80082c0:	f000 faa8 	bl	8008814 <memmove>
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	1b9b      	subs	r3, r3, r6
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	4433      	add	r3, r6
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	2000      	movs	r0, #0
 80082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d6:	462a      	mov	r2, r5
 80082d8:	f000 fad4 	bl	8008884 <_realloc_r>
 80082dc:	4606      	mov	r6, r0
 80082de:	2800      	cmp	r0, #0
 80082e0:	d1e0      	bne.n	80082a4 <__ssputs_r+0x5c>
 80082e2:	6921      	ldr	r1, [r4, #16]
 80082e4:	4650      	mov	r0, sl
 80082e6:	f7ff feb7 	bl	8008058 <_free_r>
 80082ea:	230c      	movs	r3, #12
 80082ec:	f8ca 3000 	str.w	r3, [sl]
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295
 80082fc:	e7e9      	b.n	80082d2 <__ssputs_r+0x8a>
	...

08008300 <_svfiprintf_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	4698      	mov	r8, r3
 8008306:	898b      	ldrh	r3, [r1, #12]
 8008308:	061b      	lsls	r3, r3, #24
 800830a:	b09d      	sub	sp, #116	@ 0x74
 800830c:	4607      	mov	r7, r0
 800830e:	460d      	mov	r5, r1
 8008310:	4614      	mov	r4, r2
 8008312:	d510      	bpl.n	8008336 <_svfiprintf_r+0x36>
 8008314:	690b      	ldr	r3, [r1, #16]
 8008316:	b973      	cbnz	r3, 8008336 <_svfiprintf_r+0x36>
 8008318:	2140      	movs	r1, #64	@ 0x40
 800831a:	f7ff ff09 	bl	8008130 <_malloc_r>
 800831e:	6028      	str	r0, [r5, #0]
 8008320:	6128      	str	r0, [r5, #16]
 8008322:	b930      	cbnz	r0, 8008332 <_svfiprintf_r+0x32>
 8008324:	230c      	movs	r3, #12
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b01d      	add	sp, #116	@ 0x74
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	2340      	movs	r3, #64	@ 0x40
 8008334:	616b      	str	r3, [r5, #20]
 8008336:	2300      	movs	r3, #0
 8008338:	9309      	str	r3, [sp, #36]	@ 0x24
 800833a:	2320      	movs	r3, #32
 800833c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008340:	f8cd 800c 	str.w	r8, [sp, #12]
 8008344:	2330      	movs	r3, #48	@ 0x30
 8008346:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084e4 <_svfiprintf_r+0x1e4>
 800834a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800834e:	f04f 0901 	mov.w	r9, #1
 8008352:	4623      	mov	r3, r4
 8008354:	469a      	mov	sl, r3
 8008356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800835a:	b10a      	cbz	r2, 8008360 <_svfiprintf_r+0x60>
 800835c:	2a25      	cmp	r2, #37	@ 0x25
 800835e:	d1f9      	bne.n	8008354 <_svfiprintf_r+0x54>
 8008360:	ebba 0b04 	subs.w	fp, sl, r4
 8008364:	d00b      	beq.n	800837e <_svfiprintf_r+0x7e>
 8008366:	465b      	mov	r3, fp
 8008368:	4622      	mov	r2, r4
 800836a:	4629      	mov	r1, r5
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff ff6b 	bl	8008248 <__ssputs_r>
 8008372:	3001      	adds	r0, #1
 8008374:	f000 80a7 	beq.w	80084c6 <_svfiprintf_r+0x1c6>
 8008378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800837a:	445a      	add	r2, fp
 800837c:	9209      	str	r2, [sp, #36]	@ 0x24
 800837e:	f89a 3000 	ldrb.w	r3, [sl]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 809f 	beq.w	80084c6 <_svfiprintf_r+0x1c6>
 8008388:	2300      	movs	r3, #0
 800838a:	f04f 32ff 	mov.w	r2, #4294967295
 800838e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008392:	f10a 0a01 	add.w	sl, sl, #1
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	9307      	str	r3, [sp, #28]
 800839a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800839e:	931a      	str	r3, [sp, #104]	@ 0x68
 80083a0:	4654      	mov	r4, sl
 80083a2:	2205      	movs	r2, #5
 80083a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a8:	484e      	ldr	r0, [pc, #312]	@ (80084e4 <_svfiprintf_r+0x1e4>)
 80083aa:	f7f7 ff19 	bl	80001e0 <memchr>
 80083ae:	9a04      	ldr	r2, [sp, #16]
 80083b0:	b9d8      	cbnz	r0, 80083ea <_svfiprintf_r+0xea>
 80083b2:	06d0      	lsls	r0, r2, #27
 80083b4:	bf44      	itt	mi
 80083b6:	2320      	movmi	r3, #32
 80083b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083bc:	0711      	lsls	r1, r2, #28
 80083be:	bf44      	itt	mi
 80083c0:	232b      	movmi	r3, #43	@ 0x2b
 80083c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083c6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80083cc:	d015      	beq.n	80083fa <_svfiprintf_r+0xfa>
 80083ce:	9a07      	ldr	r2, [sp, #28]
 80083d0:	4654      	mov	r4, sl
 80083d2:	2000      	movs	r0, #0
 80083d4:	f04f 0c0a 	mov.w	ip, #10
 80083d8:	4621      	mov	r1, r4
 80083da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083de:	3b30      	subs	r3, #48	@ 0x30
 80083e0:	2b09      	cmp	r3, #9
 80083e2:	d94b      	bls.n	800847c <_svfiprintf_r+0x17c>
 80083e4:	b1b0      	cbz	r0, 8008414 <_svfiprintf_r+0x114>
 80083e6:	9207      	str	r2, [sp, #28]
 80083e8:	e014      	b.n	8008414 <_svfiprintf_r+0x114>
 80083ea:	eba0 0308 	sub.w	r3, r0, r8
 80083ee:	fa09 f303 	lsl.w	r3, r9, r3
 80083f2:	4313      	orrs	r3, r2
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	46a2      	mov	sl, r4
 80083f8:	e7d2      	b.n	80083a0 <_svfiprintf_r+0xa0>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	1d19      	adds	r1, r3, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	9103      	str	r1, [sp, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	bfbb      	ittet	lt
 8008406:	425b      	neglt	r3, r3
 8008408:	f042 0202 	orrlt.w	r2, r2, #2
 800840c:	9307      	strge	r3, [sp, #28]
 800840e:	9307      	strlt	r3, [sp, #28]
 8008410:	bfb8      	it	lt
 8008412:	9204      	strlt	r2, [sp, #16]
 8008414:	7823      	ldrb	r3, [r4, #0]
 8008416:	2b2e      	cmp	r3, #46	@ 0x2e
 8008418:	d10a      	bne.n	8008430 <_svfiprintf_r+0x130>
 800841a:	7863      	ldrb	r3, [r4, #1]
 800841c:	2b2a      	cmp	r3, #42	@ 0x2a
 800841e:	d132      	bne.n	8008486 <_svfiprintf_r+0x186>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	1d1a      	adds	r2, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	9203      	str	r2, [sp, #12]
 8008428:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800842c:	3402      	adds	r4, #2
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084f4 <_svfiprintf_r+0x1f4>
 8008434:	7821      	ldrb	r1, [r4, #0]
 8008436:	2203      	movs	r2, #3
 8008438:	4650      	mov	r0, sl
 800843a:	f7f7 fed1 	bl	80001e0 <memchr>
 800843e:	b138      	cbz	r0, 8008450 <_svfiprintf_r+0x150>
 8008440:	9b04      	ldr	r3, [sp, #16]
 8008442:	eba0 000a 	sub.w	r0, r0, sl
 8008446:	2240      	movs	r2, #64	@ 0x40
 8008448:	4082      	lsls	r2, r0
 800844a:	4313      	orrs	r3, r2
 800844c:	3401      	adds	r4, #1
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008454:	4824      	ldr	r0, [pc, #144]	@ (80084e8 <_svfiprintf_r+0x1e8>)
 8008456:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800845a:	2206      	movs	r2, #6
 800845c:	f7f7 fec0 	bl	80001e0 <memchr>
 8008460:	2800      	cmp	r0, #0
 8008462:	d036      	beq.n	80084d2 <_svfiprintf_r+0x1d2>
 8008464:	4b21      	ldr	r3, [pc, #132]	@ (80084ec <_svfiprintf_r+0x1ec>)
 8008466:	bb1b      	cbnz	r3, 80084b0 <_svfiprintf_r+0x1b0>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	3307      	adds	r3, #7
 800846c:	f023 0307 	bic.w	r3, r3, #7
 8008470:	3308      	adds	r3, #8
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008476:	4433      	add	r3, r6
 8008478:	9309      	str	r3, [sp, #36]	@ 0x24
 800847a:	e76a      	b.n	8008352 <_svfiprintf_r+0x52>
 800847c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008480:	460c      	mov	r4, r1
 8008482:	2001      	movs	r0, #1
 8008484:	e7a8      	b.n	80083d8 <_svfiprintf_r+0xd8>
 8008486:	2300      	movs	r3, #0
 8008488:	3401      	adds	r4, #1
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	4619      	mov	r1, r3
 800848e:	f04f 0c0a 	mov.w	ip, #10
 8008492:	4620      	mov	r0, r4
 8008494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008498:	3a30      	subs	r2, #48	@ 0x30
 800849a:	2a09      	cmp	r2, #9
 800849c:	d903      	bls.n	80084a6 <_svfiprintf_r+0x1a6>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0c6      	beq.n	8008430 <_svfiprintf_r+0x130>
 80084a2:	9105      	str	r1, [sp, #20]
 80084a4:	e7c4      	b.n	8008430 <_svfiprintf_r+0x130>
 80084a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084aa:	4604      	mov	r4, r0
 80084ac:	2301      	movs	r3, #1
 80084ae:	e7f0      	b.n	8008492 <_svfiprintf_r+0x192>
 80084b0:	ab03      	add	r3, sp, #12
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	462a      	mov	r2, r5
 80084b6:	4b0e      	ldr	r3, [pc, #56]	@ (80084f0 <_svfiprintf_r+0x1f0>)
 80084b8:	a904      	add	r1, sp, #16
 80084ba:	4638      	mov	r0, r7
 80084bc:	f3af 8000 	nop.w
 80084c0:	1c42      	adds	r2, r0, #1
 80084c2:	4606      	mov	r6, r0
 80084c4:	d1d6      	bne.n	8008474 <_svfiprintf_r+0x174>
 80084c6:	89ab      	ldrh	r3, [r5, #12]
 80084c8:	065b      	lsls	r3, r3, #25
 80084ca:	f53f af2d 	bmi.w	8008328 <_svfiprintf_r+0x28>
 80084ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084d0:	e72c      	b.n	800832c <_svfiprintf_r+0x2c>
 80084d2:	ab03      	add	r3, sp, #12
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	462a      	mov	r2, r5
 80084d8:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <_svfiprintf_r+0x1f0>)
 80084da:	a904      	add	r1, sp, #16
 80084dc:	4638      	mov	r0, r7
 80084de:	f000 f879 	bl	80085d4 <_printf_i>
 80084e2:	e7ed      	b.n	80084c0 <_svfiprintf_r+0x1c0>
 80084e4:	08008970 	.word	0x08008970
 80084e8:	0800897a 	.word	0x0800897a
 80084ec:	00000000 	.word	0x00000000
 80084f0:	08008249 	.word	0x08008249
 80084f4:	08008976 	.word	0x08008976

080084f8 <_printf_common>:
 80084f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	4616      	mov	r6, r2
 80084fe:	4698      	mov	r8, r3
 8008500:	688a      	ldr	r2, [r1, #8]
 8008502:	690b      	ldr	r3, [r1, #16]
 8008504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008508:	4293      	cmp	r3, r2
 800850a:	bfb8      	it	lt
 800850c:	4613      	movlt	r3, r2
 800850e:	6033      	str	r3, [r6, #0]
 8008510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008514:	4607      	mov	r7, r0
 8008516:	460c      	mov	r4, r1
 8008518:	b10a      	cbz	r2, 800851e <_printf_common+0x26>
 800851a:	3301      	adds	r3, #1
 800851c:	6033      	str	r3, [r6, #0]
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	0699      	lsls	r1, r3, #26
 8008522:	bf42      	ittt	mi
 8008524:	6833      	ldrmi	r3, [r6, #0]
 8008526:	3302      	addmi	r3, #2
 8008528:	6033      	strmi	r3, [r6, #0]
 800852a:	6825      	ldr	r5, [r4, #0]
 800852c:	f015 0506 	ands.w	r5, r5, #6
 8008530:	d106      	bne.n	8008540 <_printf_common+0x48>
 8008532:	f104 0a19 	add.w	sl, r4, #25
 8008536:	68e3      	ldr	r3, [r4, #12]
 8008538:	6832      	ldr	r2, [r6, #0]
 800853a:	1a9b      	subs	r3, r3, r2
 800853c:	42ab      	cmp	r3, r5
 800853e:	dc26      	bgt.n	800858e <_printf_common+0x96>
 8008540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	3b00      	subs	r3, #0
 8008548:	bf18      	it	ne
 800854a:	2301      	movne	r3, #1
 800854c:	0692      	lsls	r2, r2, #26
 800854e:	d42b      	bmi.n	80085a8 <_printf_common+0xb0>
 8008550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008554:	4641      	mov	r1, r8
 8008556:	4638      	mov	r0, r7
 8008558:	47c8      	blx	r9
 800855a:	3001      	adds	r0, #1
 800855c:	d01e      	beq.n	800859c <_printf_common+0xa4>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	6922      	ldr	r2, [r4, #16]
 8008562:	f003 0306 	and.w	r3, r3, #6
 8008566:	2b04      	cmp	r3, #4
 8008568:	bf02      	ittt	eq
 800856a:	68e5      	ldreq	r5, [r4, #12]
 800856c:	6833      	ldreq	r3, [r6, #0]
 800856e:	1aed      	subeq	r5, r5, r3
 8008570:	68a3      	ldr	r3, [r4, #8]
 8008572:	bf0c      	ite	eq
 8008574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008578:	2500      	movne	r5, #0
 800857a:	4293      	cmp	r3, r2
 800857c:	bfc4      	itt	gt
 800857e:	1a9b      	subgt	r3, r3, r2
 8008580:	18ed      	addgt	r5, r5, r3
 8008582:	2600      	movs	r6, #0
 8008584:	341a      	adds	r4, #26
 8008586:	42b5      	cmp	r5, r6
 8008588:	d11a      	bne.n	80085c0 <_printf_common+0xc8>
 800858a:	2000      	movs	r0, #0
 800858c:	e008      	b.n	80085a0 <_printf_common+0xa8>
 800858e:	2301      	movs	r3, #1
 8008590:	4652      	mov	r2, sl
 8008592:	4641      	mov	r1, r8
 8008594:	4638      	mov	r0, r7
 8008596:	47c8      	blx	r9
 8008598:	3001      	adds	r0, #1
 800859a:	d103      	bne.n	80085a4 <_printf_common+0xac>
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a4:	3501      	adds	r5, #1
 80085a6:	e7c6      	b.n	8008536 <_printf_common+0x3e>
 80085a8:	18e1      	adds	r1, r4, r3
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	2030      	movs	r0, #48	@ 0x30
 80085ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085b2:	4422      	add	r2, r4
 80085b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085bc:	3302      	adds	r3, #2
 80085be:	e7c7      	b.n	8008550 <_printf_common+0x58>
 80085c0:	2301      	movs	r3, #1
 80085c2:	4622      	mov	r2, r4
 80085c4:	4641      	mov	r1, r8
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c8      	blx	r9
 80085ca:	3001      	adds	r0, #1
 80085cc:	d0e6      	beq.n	800859c <_printf_common+0xa4>
 80085ce:	3601      	adds	r6, #1
 80085d0:	e7d9      	b.n	8008586 <_printf_common+0x8e>
	...

080085d4 <_printf_i>:
 80085d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	7e0f      	ldrb	r7, [r1, #24]
 80085da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085dc:	2f78      	cmp	r7, #120	@ 0x78
 80085de:	4691      	mov	r9, r2
 80085e0:	4680      	mov	r8, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	469a      	mov	sl, r3
 80085e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085ea:	d807      	bhi.n	80085fc <_printf_i+0x28>
 80085ec:	2f62      	cmp	r7, #98	@ 0x62
 80085ee:	d80a      	bhi.n	8008606 <_printf_i+0x32>
 80085f0:	2f00      	cmp	r7, #0
 80085f2:	f000 80d2 	beq.w	800879a <_printf_i+0x1c6>
 80085f6:	2f58      	cmp	r7, #88	@ 0x58
 80085f8:	f000 80b9 	beq.w	800876e <_printf_i+0x19a>
 80085fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008604:	e03a      	b.n	800867c <_printf_i+0xa8>
 8008606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800860a:	2b15      	cmp	r3, #21
 800860c:	d8f6      	bhi.n	80085fc <_printf_i+0x28>
 800860e:	a101      	add	r1, pc, #4	@ (adr r1, 8008614 <_printf_i+0x40>)
 8008610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008614:	0800866d 	.word	0x0800866d
 8008618:	08008681 	.word	0x08008681
 800861c:	080085fd 	.word	0x080085fd
 8008620:	080085fd 	.word	0x080085fd
 8008624:	080085fd 	.word	0x080085fd
 8008628:	080085fd 	.word	0x080085fd
 800862c:	08008681 	.word	0x08008681
 8008630:	080085fd 	.word	0x080085fd
 8008634:	080085fd 	.word	0x080085fd
 8008638:	080085fd 	.word	0x080085fd
 800863c:	080085fd 	.word	0x080085fd
 8008640:	08008781 	.word	0x08008781
 8008644:	080086ab 	.word	0x080086ab
 8008648:	0800873b 	.word	0x0800873b
 800864c:	080085fd 	.word	0x080085fd
 8008650:	080085fd 	.word	0x080085fd
 8008654:	080087a3 	.word	0x080087a3
 8008658:	080085fd 	.word	0x080085fd
 800865c:	080086ab 	.word	0x080086ab
 8008660:	080085fd 	.word	0x080085fd
 8008664:	080085fd 	.word	0x080085fd
 8008668:	08008743 	.word	0x08008743
 800866c:	6833      	ldr	r3, [r6, #0]
 800866e:	1d1a      	adds	r2, r3, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6032      	str	r2, [r6, #0]
 8008674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800867c:	2301      	movs	r3, #1
 800867e:	e09d      	b.n	80087bc <_printf_i+0x1e8>
 8008680:	6833      	ldr	r3, [r6, #0]
 8008682:	6820      	ldr	r0, [r4, #0]
 8008684:	1d19      	adds	r1, r3, #4
 8008686:	6031      	str	r1, [r6, #0]
 8008688:	0606      	lsls	r6, r0, #24
 800868a:	d501      	bpl.n	8008690 <_printf_i+0xbc>
 800868c:	681d      	ldr	r5, [r3, #0]
 800868e:	e003      	b.n	8008698 <_printf_i+0xc4>
 8008690:	0645      	lsls	r5, r0, #25
 8008692:	d5fb      	bpl.n	800868c <_printf_i+0xb8>
 8008694:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008698:	2d00      	cmp	r5, #0
 800869a:	da03      	bge.n	80086a4 <_printf_i+0xd0>
 800869c:	232d      	movs	r3, #45	@ 0x2d
 800869e:	426d      	negs	r5, r5
 80086a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086a4:	4859      	ldr	r0, [pc, #356]	@ (800880c <_printf_i+0x238>)
 80086a6:	230a      	movs	r3, #10
 80086a8:	e011      	b.n	80086ce <_printf_i+0xfa>
 80086aa:	6821      	ldr	r1, [r4, #0]
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	0608      	lsls	r0, r1, #24
 80086b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80086b4:	d402      	bmi.n	80086bc <_printf_i+0xe8>
 80086b6:	0649      	lsls	r1, r1, #25
 80086b8:	bf48      	it	mi
 80086ba:	b2ad      	uxthmi	r5, r5
 80086bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80086be:	4853      	ldr	r0, [pc, #332]	@ (800880c <_printf_i+0x238>)
 80086c0:	6033      	str	r3, [r6, #0]
 80086c2:	bf14      	ite	ne
 80086c4:	230a      	movne	r3, #10
 80086c6:	2308      	moveq	r3, #8
 80086c8:	2100      	movs	r1, #0
 80086ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086ce:	6866      	ldr	r6, [r4, #4]
 80086d0:	60a6      	str	r6, [r4, #8]
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	bfa2      	ittt	ge
 80086d6:	6821      	ldrge	r1, [r4, #0]
 80086d8:	f021 0104 	bicge.w	r1, r1, #4
 80086dc:	6021      	strge	r1, [r4, #0]
 80086de:	b90d      	cbnz	r5, 80086e4 <_printf_i+0x110>
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	d04b      	beq.n	800877c <_printf_i+0x1a8>
 80086e4:	4616      	mov	r6, r2
 80086e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80086ea:	fb03 5711 	mls	r7, r3, r1, r5
 80086ee:	5dc7      	ldrb	r7, [r0, r7]
 80086f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086f4:	462f      	mov	r7, r5
 80086f6:	42bb      	cmp	r3, r7
 80086f8:	460d      	mov	r5, r1
 80086fa:	d9f4      	bls.n	80086e6 <_printf_i+0x112>
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d10b      	bne.n	8008718 <_printf_i+0x144>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	07df      	lsls	r7, r3, #31
 8008704:	d508      	bpl.n	8008718 <_printf_i+0x144>
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	6861      	ldr	r1, [r4, #4]
 800870a:	4299      	cmp	r1, r3
 800870c:	bfde      	ittt	le
 800870e:	2330      	movle	r3, #48	@ 0x30
 8008710:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008714:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008718:	1b92      	subs	r2, r2, r6
 800871a:	6122      	str	r2, [r4, #16]
 800871c:	f8cd a000 	str.w	sl, [sp]
 8008720:	464b      	mov	r3, r9
 8008722:	aa03      	add	r2, sp, #12
 8008724:	4621      	mov	r1, r4
 8008726:	4640      	mov	r0, r8
 8008728:	f7ff fee6 	bl	80084f8 <_printf_common>
 800872c:	3001      	adds	r0, #1
 800872e:	d14a      	bne.n	80087c6 <_printf_i+0x1f2>
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	b004      	add	sp, #16
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	f043 0320 	orr.w	r3, r3, #32
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	4833      	ldr	r0, [pc, #204]	@ (8008810 <_printf_i+0x23c>)
 8008744:	2778      	movs	r7, #120	@ 0x78
 8008746:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	6831      	ldr	r1, [r6, #0]
 800874e:	061f      	lsls	r7, r3, #24
 8008750:	f851 5b04 	ldr.w	r5, [r1], #4
 8008754:	d402      	bmi.n	800875c <_printf_i+0x188>
 8008756:	065f      	lsls	r7, r3, #25
 8008758:	bf48      	it	mi
 800875a:	b2ad      	uxthmi	r5, r5
 800875c:	6031      	str	r1, [r6, #0]
 800875e:	07d9      	lsls	r1, r3, #31
 8008760:	bf44      	itt	mi
 8008762:	f043 0320 	orrmi.w	r3, r3, #32
 8008766:	6023      	strmi	r3, [r4, #0]
 8008768:	b11d      	cbz	r5, 8008772 <_printf_i+0x19e>
 800876a:	2310      	movs	r3, #16
 800876c:	e7ac      	b.n	80086c8 <_printf_i+0xf4>
 800876e:	4827      	ldr	r0, [pc, #156]	@ (800880c <_printf_i+0x238>)
 8008770:	e7e9      	b.n	8008746 <_printf_i+0x172>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	f023 0320 	bic.w	r3, r3, #32
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	e7f6      	b.n	800876a <_printf_i+0x196>
 800877c:	4616      	mov	r6, r2
 800877e:	e7bd      	b.n	80086fc <_printf_i+0x128>
 8008780:	6833      	ldr	r3, [r6, #0]
 8008782:	6825      	ldr	r5, [r4, #0]
 8008784:	6961      	ldr	r1, [r4, #20]
 8008786:	1d18      	adds	r0, r3, #4
 8008788:	6030      	str	r0, [r6, #0]
 800878a:	062e      	lsls	r6, r5, #24
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	d501      	bpl.n	8008794 <_printf_i+0x1c0>
 8008790:	6019      	str	r1, [r3, #0]
 8008792:	e002      	b.n	800879a <_printf_i+0x1c6>
 8008794:	0668      	lsls	r0, r5, #25
 8008796:	d5fb      	bpl.n	8008790 <_printf_i+0x1bc>
 8008798:	8019      	strh	r1, [r3, #0]
 800879a:	2300      	movs	r3, #0
 800879c:	6123      	str	r3, [r4, #16]
 800879e:	4616      	mov	r6, r2
 80087a0:	e7bc      	b.n	800871c <_printf_i+0x148>
 80087a2:	6833      	ldr	r3, [r6, #0]
 80087a4:	1d1a      	adds	r2, r3, #4
 80087a6:	6032      	str	r2, [r6, #0]
 80087a8:	681e      	ldr	r6, [r3, #0]
 80087aa:	6862      	ldr	r2, [r4, #4]
 80087ac:	2100      	movs	r1, #0
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7f7 fd16 	bl	80001e0 <memchr>
 80087b4:	b108      	cbz	r0, 80087ba <_printf_i+0x1e6>
 80087b6:	1b80      	subs	r0, r0, r6
 80087b8:	6060      	str	r0, [r4, #4]
 80087ba:	6863      	ldr	r3, [r4, #4]
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	2300      	movs	r3, #0
 80087c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087c4:	e7aa      	b.n	800871c <_printf_i+0x148>
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	4632      	mov	r2, r6
 80087ca:	4649      	mov	r1, r9
 80087cc:	4640      	mov	r0, r8
 80087ce:	47d0      	blx	sl
 80087d0:	3001      	adds	r0, #1
 80087d2:	d0ad      	beq.n	8008730 <_printf_i+0x15c>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	079b      	lsls	r3, r3, #30
 80087d8:	d413      	bmi.n	8008802 <_printf_i+0x22e>
 80087da:	68e0      	ldr	r0, [r4, #12]
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	4298      	cmp	r0, r3
 80087e0:	bfb8      	it	lt
 80087e2:	4618      	movlt	r0, r3
 80087e4:	e7a6      	b.n	8008734 <_printf_i+0x160>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4632      	mov	r2, r6
 80087ea:	4649      	mov	r1, r9
 80087ec:	4640      	mov	r0, r8
 80087ee:	47d0      	blx	sl
 80087f0:	3001      	adds	r0, #1
 80087f2:	d09d      	beq.n	8008730 <_printf_i+0x15c>
 80087f4:	3501      	adds	r5, #1
 80087f6:	68e3      	ldr	r3, [r4, #12]
 80087f8:	9903      	ldr	r1, [sp, #12]
 80087fa:	1a5b      	subs	r3, r3, r1
 80087fc:	42ab      	cmp	r3, r5
 80087fe:	dcf2      	bgt.n	80087e6 <_printf_i+0x212>
 8008800:	e7eb      	b.n	80087da <_printf_i+0x206>
 8008802:	2500      	movs	r5, #0
 8008804:	f104 0619 	add.w	r6, r4, #25
 8008808:	e7f5      	b.n	80087f6 <_printf_i+0x222>
 800880a:	bf00      	nop
 800880c:	08008981 	.word	0x08008981
 8008810:	08008992 	.word	0x08008992

08008814 <memmove>:
 8008814:	4288      	cmp	r0, r1
 8008816:	b510      	push	{r4, lr}
 8008818:	eb01 0402 	add.w	r4, r1, r2
 800881c:	d902      	bls.n	8008824 <memmove+0x10>
 800881e:	4284      	cmp	r4, r0
 8008820:	4623      	mov	r3, r4
 8008822:	d807      	bhi.n	8008834 <memmove+0x20>
 8008824:	1e43      	subs	r3, r0, #1
 8008826:	42a1      	cmp	r1, r4
 8008828:	d008      	beq.n	800883c <memmove+0x28>
 800882a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008832:	e7f8      	b.n	8008826 <memmove+0x12>
 8008834:	4402      	add	r2, r0
 8008836:	4601      	mov	r1, r0
 8008838:	428a      	cmp	r2, r1
 800883a:	d100      	bne.n	800883e <memmove+0x2a>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008846:	e7f7      	b.n	8008838 <memmove+0x24>

08008848 <_sbrk_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	@ (8008864 <_sbrk_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f9 fae6 	bl	8001e24 <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_sbrk_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_sbrk_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000500 	.word	0x20000500

08008868 <memcpy>:
 8008868:	440a      	add	r2, r1
 800886a:	4291      	cmp	r1, r2
 800886c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008870:	d100      	bne.n	8008874 <memcpy+0xc>
 8008872:	4770      	bx	lr
 8008874:	b510      	push	{r4, lr}
 8008876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800887e:	4291      	cmp	r1, r2
 8008880:	d1f9      	bne.n	8008876 <memcpy+0xe>
 8008882:	bd10      	pop	{r4, pc}

08008884 <_realloc_r>:
 8008884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008888:	4680      	mov	r8, r0
 800888a:	4615      	mov	r5, r2
 800888c:	460c      	mov	r4, r1
 800888e:	b921      	cbnz	r1, 800889a <_realloc_r+0x16>
 8008890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	4611      	mov	r1, r2
 8008896:	f7ff bc4b 	b.w	8008130 <_malloc_r>
 800889a:	b92a      	cbnz	r2, 80088a8 <_realloc_r+0x24>
 800889c:	f7ff fbdc 	bl	8008058 <_free_r>
 80088a0:	2400      	movs	r4, #0
 80088a2:	4620      	mov	r0, r4
 80088a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a8:	f000 f81a 	bl	80088e0 <_malloc_usable_size_r>
 80088ac:	4285      	cmp	r5, r0
 80088ae:	4606      	mov	r6, r0
 80088b0:	d802      	bhi.n	80088b8 <_realloc_r+0x34>
 80088b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088b6:	d8f4      	bhi.n	80088a2 <_realloc_r+0x1e>
 80088b8:	4629      	mov	r1, r5
 80088ba:	4640      	mov	r0, r8
 80088bc:	f7ff fc38 	bl	8008130 <_malloc_r>
 80088c0:	4607      	mov	r7, r0
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0ec      	beq.n	80088a0 <_realloc_r+0x1c>
 80088c6:	42b5      	cmp	r5, r6
 80088c8:	462a      	mov	r2, r5
 80088ca:	4621      	mov	r1, r4
 80088cc:	bf28      	it	cs
 80088ce:	4632      	movcs	r2, r6
 80088d0:	f7ff ffca 	bl	8008868 <memcpy>
 80088d4:	4621      	mov	r1, r4
 80088d6:	4640      	mov	r0, r8
 80088d8:	f7ff fbbe 	bl	8008058 <_free_r>
 80088dc:	463c      	mov	r4, r7
 80088de:	e7e0      	b.n	80088a2 <_realloc_r+0x1e>

080088e0 <_malloc_usable_size_r>:
 80088e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e4:	1f18      	subs	r0, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bfbc      	itt	lt
 80088ea:	580b      	ldrlt	r3, [r1, r0]
 80088ec:	18c0      	addlt	r0, r0, r3
 80088ee:	4770      	bx	lr

080088f0 <_init>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	bf00      	nop
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr

080088fc <_fini>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr
